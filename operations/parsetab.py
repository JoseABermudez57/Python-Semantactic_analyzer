
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADDITION ASSIGNMENT BOOLEAN_TYPE DECIMAL_TYPE DOT EQUAL FALSE_VALUE FOR GREATER_OR_EQUAL GREATER_THAN IF INTEGER_TYPE LESS_OR_EQUAL LESS_THAN NOT_EQUAL NUMBER OPEN_BODY PARENTHESIS_CLOSE PARENTHESIS_OPEN PIPE QUOTATION_MARKS RETURN STRING_TYPE SUBTRACTION TRUE_VALUE VARIABLE\n\tPROGRAM : BLOCK_CODE\n\t\n    BLOCK_CODE : GV\n            | GC\n            | GF\n            | GCF\n            | PRINT\n            | EMPTY\n    \n    C : GV\n        | GC\n        | GCF\n        | PRINT\n        | EMPTY\n    \n    GV : TD V I VA BLOCK_CODE\n        | TD V BLOCK_CODE\n        | EMPTY\n    \n    PRINT : SUBTRACTION MA VAP ME SUBTRACTION BLOCK_CODE\n        | EMPTY\n    \n    VAP : V\n        | VA\n        | CD\n        | FR\n    \n    FR : TD V ME PR MA\n        | TD V ME MA\n    \n    TD : INTEGER_TYPE\n        | BOOLEAN_TYPE\n        | DECIMAL_TYPE\n        | STRING_TYPE\n    \n    V : VARIABLE\n    \n    I : ASSIGNMENT\n    \n    VA : NUMBER\n       | NUMBER DOT NUMBER\n       | TRUE_VALUE\n       | FALSE_VALUE\n       | QUOTATION_MARKS V QUOTATION_MARKS\n    \n    GC : CN PA CD PC MY C MN BLOCK_CODE\n        | CN PA CD PC MY MN BLOCK_CODE\n        | EMPTY\n    \n    CN : IF\n    \n    CD : V S V\n        | V S VA\n        | VA S V\n        | VA S VA\n    \n    S : EQUAL\n        | GREATER_THAN\n        | LESS_THAN\n        | GREATER_OR_EQUAL\n        | LESS_OR_EQUAL\n        | NOT_EQUAL\n    \n    GF : TD V ME PR MA MY C RT MN BLOCK_CODE\n        | V ME PR MA MY C MN BLOCK_CODE\n        | TD V ME PR MA MY RT MN BLOCK_CODE\n        | V ME PR MA MY MN BLOCK_CODE\n        | TD V ME MA MY C RT MN BLOCK_CODE\n        | V ME MA MY C MN BLOCK_CODE\n        | TD V ME MA MY RT MN BLOCK_CODE\n        | V ME MA MY MN BLOCK_CODE\n        | EMPTY\n    \n    PR : V\n    \n    ME : LESS_THAN\n    \n    MA : GREATER_THAN\n    \n    RT : RETURN V\n    \n    GCF : F PA CDF PC MY C MN BLOCK_CODE\n        | F PA CDF PC MY MN BLOCK_CODE\n        | EMPTY\n    \n    F :  FOR\n    \n    CDF : NUMBER SE NUMBER SE O\n    \n    SE : PIPE\n    \n    O : SUBTRACTION\n        | ADDITION\n    \n    PA : PARENTHESIS_OPEN\n    \n    PC : PARENTHESIS_CLOSE\n    \n    MY : OPEN_BODY\n    \n    MN : LESS_OR_EQUAL\n    \n\tEMPTY :\n\t'
    
_lr_action_items = {'SUBTRACTION':([0,19,21,23,39,40,41,51,55,56,71,72,76,77,79,85,87,92,93,94,96,98,103,104,106,108,110,111,118,120,123,125,132,133,138,],[13,-28,13,-59,-30,-32,-33,13,13,-72,-67,96,13,13,13,-73,13,-31,-34,13,13,13,13,13,13,13,13,128,13,13,13,13,13,13,13,]),'$end':([0,1,2,3,4,5,6,7,8,19,21,30,39,40,41,51,74,79,85,92,93,96,103,104,105,108,110,112,118,120,121,122,123,124,125,126,132,133,134,135,136,137,138,139,140,141,],[-74,0,-1,-2,-3,-4,-5,-6,-7,-28,-74,-14,-30,-32,-33,-74,-13,-74,-73,-31,-34,-74,-74,-74,-56,-74,-74,-16,-74,-74,-52,-54,-74,-36,-74,-63,-74,-74,-55,-50,-35,-62,-74,-51,-53,-49,]),'INTEGER_TYPE':([0,19,21,27,28,39,40,41,51,55,56,76,77,79,85,87,92,93,94,96,98,103,104,106,108,110,118,120,123,125,132,133,138,],[14,-28,14,14,-60,-30,-32,-33,14,14,-72,14,14,14,-73,14,-31,-34,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'BOOLEAN_TYPE':([0,19,21,27,28,39,40,41,51,55,56,76,77,79,85,87,92,93,94,96,98,103,104,106,108,110,118,120,123,125,132,133,138,],[15,-28,15,15,-60,-30,-32,-33,15,15,-72,15,15,15,-73,15,-31,-34,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'DECIMAL_TYPE':([0,19,21,27,28,39,40,41,51,55,56,76,77,79,85,87,92,93,94,96,98,103,104,106,108,110,118,120,123,125,132,133,138,],[16,-28,16,16,-60,-30,-32,-33,16,16,-72,16,16,16,-73,16,-31,-34,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'STRING_TYPE':([0,19,21,27,28,39,40,41,51,55,56,76,77,79,85,87,92,93,94,96,98,103,104,106,108,110,118,120,123,125,132,133,138,],[17,-28,17,17,-60,-30,-32,-33,17,17,-72,17,17,17,-73,17,-31,-34,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'IF':([0,19,21,39,40,41,51,55,56,76,77,79,85,87,92,93,94,96,98,103,104,106,108,110,118,120,123,125,132,133,138,],[18,-28,18,-30,-32,-33,18,18,-72,18,18,18,-73,18,-31,-34,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'VARIABLE':([0,9,14,15,16,17,19,21,22,23,24,25,27,28,31,39,40,41,42,50,51,59,60,61,62,63,64,65,66,79,85,86,92,93,96,97,101,103,104,106,108,110,118,120,123,125,132,133,138,],[19,19,-24,-25,-26,-27,-28,19,19,-59,19,-70,19,-60,19,-30,-32,-33,19,19,19,19,-43,-44,-45,-46,-47,-48,19,19,-73,19,-31,-34,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'FOR':([0,19,21,39,40,41,51,55,56,76,77,79,85,87,92,93,94,96,98,103,104,106,108,110,118,120,123,125,132,133,138,],[20,-28,20,-30,-32,-33,20,20,-72,20,20,20,-73,20,-31,-34,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'LESS_OR_EQUAL':([3,4,5,6,7,8,19,21,30,37,38,39,40,41,46,47,51,55,56,74,77,78,79,80,81,82,83,84,85,87,92,93,94,96,100,102,103,104,105,106,107,108,109,110,112,116,117,118,119,120,121,122,123,124,125,126,131,132,133,134,135,136,137,138,139,140,141,],[-2,-3,-4,-5,-6,-7,-28,-74,-14,64,64,-30,-32,-33,64,64,-74,85,-72,-13,85,85,-74,-8,-9,-10,-11,-12,-73,85,-31,-34,85,-74,85,85,-74,-74,-56,-74,85,-74,85,-74,-16,85,85,-74,-61,-74,-52,-54,-74,-36,-74,-63,85,-74,-74,-55,-50,-35,-62,-74,-51,-53,-49,]),'RETURN':([3,4,5,6,7,8,19,21,30,39,40,41,51,56,74,76,79,80,81,82,83,84,85,92,93,96,98,99,103,104,105,106,108,110,112,115,118,120,121,122,123,124,125,126,132,133,134,135,136,137,138,139,140,141,],[-2,-3,-4,-5,-6,-7,-28,-74,-14,-30,-32,-33,-74,-72,-13,101,-74,-8,-9,-10,-11,-12,-73,-31,-34,-74,101,101,-74,-74,-56,-74,-74,-74,-16,101,-74,-74,-52,-54,-74,-36,-74,-63,-74,-74,-55,-50,-35,-62,-74,-51,-53,-49,]),'LESS_THAN':([10,19,21,28,37,38,39,40,41,45,46,47,48,49,73,88,89,90,91,92,93,114,130,],[23,-28,23,-60,62,62,-30,-32,-33,23,62,62,-20,-21,23,-39,-40,-42,-41,-31,-34,-23,-22,]),'PARENTHESIS_OPEN':([11,12,18,20,],[25,25,-38,-65,]),'GREATER_THAN':([13,19,22,23,31,33,34,37,38,39,40,41,46,47,52,92,93,97,113,],[28,-28,28,-59,28,-58,28,61,61,-30,-32,-33,61,61,28,-31,-34,28,28,]),'ASSIGNMENT':([19,21,106,],[-28,32,32,]),'EQUAL':([19,37,38,39,40,41,46,47,92,93,],[-28,60,60,-30,-32,-33,60,60,-31,-34,]),'GREATER_OR_EQUAL':([19,37,38,39,40,41,46,47,92,93,],[-28,63,63,-30,-32,-33,63,63,-31,-34,]),'NOT_EQUAL':([19,37,38,39,40,41,46,47,92,93,],[-28,65,65,-30,-32,-33,65,65,-31,-34,]),'QUOTATION_MARKS':([19,24,25,27,28,29,32,59,60,61,62,63,64,65,66,68,],[-28,42,-70,42,-60,42,-29,42,-43,-44,-45,-46,-47,-48,42,93,]),'PARENTHESIS_CLOSE':([19,36,39,40,41,43,88,89,90,91,92,93,127,128,129,],[-28,58,-30,-32,-33,58,-39,-40,-42,-41,-31,-34,-66,-68,-69,]),'NUMBER':([24,25,26,27,28,29,32,59,60,61,62,63,64,65,66,67,70,71,],[39,-70,44,39,-60,39,-29,39,-43,-44,-45,-46,-47,-48,39,92,95,-67,]),'TRUE_VALUE':([24,25,27,28,29,32,59,60,61,62,63,64,65,66,],[40,-70,40,-60,40,-29,40,-43,-44,-45,-46,-47,-48,40,]),'FALSE_VALUE':([24,25,27,28,29,32,59,60,61,62,63,64,65,66,],[41,-70,41,-60,41,-29,41,-43,-44,-45,-46,-47,-48,41,]),'OPEN_BODY':([28,35,53,54,57,58,69,75,],[-60,56,56,56,56,-71,56,56,]),'DOT':([39,],[67,]),'PIPE':([44,95,],[71,71,]),'ADDITION':([71,111,],[-67,129,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'BLOCK_CODE':([0,21,51,79,96,103,104,106,108,110,118,120,123,125,132,133,138,],[2,30,74,105,112,121,122,30,124,126,134,135,136,137,139,140,141,]),'GV':([0,21,51,55,76,77,79,87,94,96,98,103,104,106,108,110,118,120,123,125,132,133,138,],[3,3,3,80,80,80,3,80,80,3,80,3,3,3,3,3,3,3,3,3,3,3,3,]),'GC':([0,21,51,55,76,77,79,87,94,96,98,103,104,106,108,110,118,120,123,125,132,133,138,],[4,4,4,81,81,81,4,81,81,4,81,4,4,4,4,4,4,4,4,4,4,4,4,]),'GF':([0,21,51,79,96,103,104,106,108,110,118,120,123,125,132,133,138,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'GCF':([0,21,51,55,76,77,79,87,94,96,98,103,104,106,108,110,118,120,123,125,132,133,138,],[6,6,6,82,82,82,6,82,82,6,82,6,6,6,6,6,6,6,6,6,6,6,6,]),'PRINT':([0,21,51,55,76,77,79,87,94,96,98,103,104,106,108,110,118,120,123,125,132,133,138,],[7,7,7,83,83,83,7,83,83,7,83,7,7,7,7,7,7,7,7,7,7,7,7,]),'EMPTY':([0,21,51,55,76,77,79,87,94,96,98,103,104,106,108,110,118,120,123,125,132,133,138,],[8,8,8,84,84,84,8,84,84,8,84,8,8,8,8,8,8,8,8,8,8,8,8,]),'TD':([0,21,27,51,55,76,77,79,87,94,96,98,103,104,106,108,110,118,120,123,125,132,133,138,],[9,9,50,9,86,86,86,9,86,86,9,86,9,9,9,9,9,9,9,9,9,9,9,9,]),'V':([0,9,21,22,24,27,31,42,50,51,59,66,79,86,96,97,101,103,104,106,108,110,118,120,123,125,132,133,138,],[10,21,10,33,37,46,33,68,73,10,88,91,10,106,10,33,119,10,10,10,10,10,10,10,10,10,10,10,10,]),'CN':([0,21,51,55,76,77,79,87,94,96,98,103,104,106,108,110,118,120,123,125,132,133,138,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'F':([0,21,51,55,76,77,79,87,94,96,98,103,104,106,108,110,118,120,123,125,132,133,138,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'ME':([10,21,45,73,],[22,31,72,97,]),'PA':([11,12,],[24,26,]),'MA':([13,22,31,34,52,97,113,],[27,35,53,54,75,114,130,]),'I':([21,106,],[29,29,]),'PR':([22,31,97,],[34,52,113,]),'CD':([24,27,],[36,48,]),'VA':([24,27,29,59,66,],[38,47,51,89,90,]),'CDF':([26,],[43,]),'VAP':([27,],[45,]),'FR':([27,],[49,]),'MY':([35,53,54,57,69,75,],[55,76,77,87,94,98,]),'PC':([36,43,],[57,69,]),'S':([37,38,46,47,],[59,66,59,66,]),'SE':([44,95,],[70,111,]),'C':([55,76,77,87,94,98,],[78,99,102,107,109,115,]),'MN':([55,77,78,87,94,100,102,107,109,116,117,131,],[79,103,104,108,110,118,120,123,125,132,133,138,]),'RT':([76,98,99,115,],[100,116,117,131,]),'O':([111,],[127,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> BLOCK_CODE','PROGRAM',1,'p_PROGRAM','syntactic_analyzer.py',102),
  ('BLOCK_CODE -> GV','BLOCK_CODE',1,'p_BLOCK_CODE','syntactic_analyzer.py',109),
  ('BLOCK_CODE -> GC','BLOCK_CODE',1,'p_BLOCK_CODE','syntactic_analyzer.py',110),
  ('BLOCK_CODE -> GF','BLOCK_CODE',1,'p_BLOCK_CODE','syntactic_analyzer.py',111),
  ('BLOCK_CODE -> GCF','BLOCK_CODE',1,'p_BLOCK_CODE','syntactic_analyzer.py',112),
  ('BLOCK_CODE -> PRINT','BLOCK_CODE',1,'p_BLOCK_CODE','syntactic_analyzer.py',113),
  ('BLOCK_CODE -> EMPTY','BLOCK_CODE',1,'p_BLOCK_CODE','syntactic_analyzer.py',114),
  ('C -> GV','C',1,'p_C','syntactic_analyzer.py',125),
  ('C -> GC','C',1,'p_C','syntactic_analyzer.py',126),
  ('C -> GCF','C',1,'p_C','syntactic_analyzer.py',127),
  ('C -> PRINT','C',1,'p_C','syntactic_analyzer.py',128),
  ('C -> EMPTY','C',1,'p_C','syntactic_analyzer.py',129),
  ('GV -> TD V I VA BLOCK_CODE','GV',5,'p_GV','syntactic_analyzer.py',172),
  ('GV -> TD V BLOCK_CODE','GV',3,'p_GV','syntactic_analyzer.py',173),
  ('GV -> EMPTY','GV',1,'p_GV','syntactic_analyzer.py',174),
  ('PRINT -> SUBTRACTION MA VAP ME SUBTRACTION BLOCK_CODE','PRINT',6,'p_PRINT','syntactic_analyzer.py',192),
  ('PRINT -> EMPTY','PRINT',1,'p_PRINT','syntactic_analyzer.py',193),
  ('VAP -> V','VAP',1,'p_VAP','syntactic_analyzer.py',203),
  ('VAP -> VA','VAP',1,'p_VAP','syntactic_analyzer.py',204),
  ('VAP -> CD','VAP',1,'p_VAP','syntactic_analyzer.py',205),
  ('VAP -> FR','VAP',1,'p_VAP','syntactic_analyzer.py',206),
  ('FR -> TD V ME PR MA','FR',5,'p_FR','syntactic_analyzer.py',213),
  ('FR -> TD V ME MA','FR',4,'p_FR','syntactic_analyzer.py',214),
  ('TD -> INTEGER_TYPE','TD',1,'p_TD','syntactic_analyzer.py',226),
  ('TD -> BOOLEAN_TYPE','TD',1,'p_TD','syntactic_analyzer.py',227),
  ('TD -> DECIMAL_TYPE','TD',1,'p_TD','syntactic_analyzer.py',228),
  ('TD -> STRING_TYPE','TD',1,'p_TD','syntactic_analyzer.py',229),
  ('V -> VARIABLE','V',1,'p_V','syntactic_analyzer.py',237),
  ('I -> ASSIGNMENT','I',1,'p_I','syntactic_analyzer.py',245),
  ('VA -> NUMBER','VA',1,'p_VA','syntactic_analyzer.py',253),
  ('VA -> NUMBER DOT NUMBER','VA',3,'p_VA','syntactic_analyzer.py',254),
  ('VA -> TRUE_VALUE','VA',1,'p_VA','syntactic_analyzer.py',255),
  ('VA -> FALSE_VALUE','VA',1,'p_VA','syntactic_analyzer.py',256),
  ('VA -> QUOTATION_MARKS V QUOTATION_MARKS','VA',3,'p_VA','syntactic_analyzer.py',257),
  ('GC -> CN PA CD PC MY C MN BLOCK_CODE','GC',8,'p_GC','syntactic_analyzer.py',268),
  ('GC -> CN PA CD PC MY MN BLOCK_CODE','GC',7,'p_GC','syntactic_analyzer.py',269),
  ('GC -> EMPTY','GC',1,'p_GC','syntactic_analyzer.py',270),
  ('CN -> IF','CN',1,'p_CN','syntactic_analyzer.py',285),
  ('CD -> V S V','CD',3,'p_CD','syntactic_analyzer.py',396),
  ('CD -> V S VA','CD',3,'p_CD','syntactic_analyzer.py',397),
  ('CD -> VA S V','CD',3,'p_CD','syntactic_analyzer.py',398),
  ('CD -> VA S VA','CD',3,'p_CD','syntactic_analyzer.py',399),
  ('S -> EQUAL','S',1,'p_S','syntactic_analyzer.py',410),
  ('S -> GREATER_THAN','S',1,'p_S','syntactic_analyzer.py',411),
  ('S -> LESS_THAN','S',1,'p_S','syntactic_analyzer.py',412),
  ('S -> GREATER_OR_EQUAL','S',1,'p_S','syntactic_analyzer.py',413),
  ('S -> LESS_OR_EQUAL','S',1,'p_S','syntactic_analyzer.py',414),
  ('S -> NOT_EQUAL','S',1,'p_S','syntactic_analyzer.py',415),
  ('GF -> TD V ME PR MA MY C RT MN BLOCK_CODE','GF',10,'p_GF','syntactic_analyzer.py',423),
  ('GF -> V ME PR MA MY C MN BLOCK_CODE','GF',8,'p_GF','syntactic_analyzer.py',424),
  ('GF -> TD V ME PR MA MY RT MN BLOCK_CODE','GF',9,'p_GF','syntactic_analyzer.py',425),
  ('GF -> V ME PR MA MY MN BLOCK_CODE','GF',7,'p_GF','syntactic_analyzer.py',426),
  ('GF -> TD V ME MA MY C RT MN BLOCK_CODE','GF',9,'p_GF','syntactic_analyzer.py',427),
  ('GF -> V ME MA MY C MN BLOCK_CODE','GF',7,'p_GF','syntactic_analyzer.py',428),
  ('GF -> TD V ME MA MY RT MN BLOCK_CODE','GF',8,'p_GF','syntactic_analyzer.py',429),
  ('GF -> V ME MA MY MN BLOCK_CODE','GF',6,'p_GF','syntactic_analyzer.py',430),
  ('GF -> EMPTY','GF',1,'p_GF','syntactic_analyzer.py',431),
  ('PR -> V','PR',1,'p_PR','syntactic_analyzer.py',450),
  ('ME -> LESS_THAN','ME',1,'p_ME','syntactic_analyzer.py',458),
  ('MA -> GREATER_THAN','MA',1,'p_MA','syntactic_analyzer.py',466),
  ('RT -> RETURN V','RT',2,'p_RT','syntactic_analyzer.py',474),
  ('GCF -> F PA CDF PC MY C MN BLOCK_CODE','GCF',8,'p_GCF','syntactic_analyzer.py',482),
  ('GCF -> F PA CDF PC MY MN BLOCK_CODE','GCF',7,'p_GCF','syntactic_analyzer.py',483),
  ('GCF -> EMPTY','GCF',1,'p_GCF','syntactic_analyzer.py',484),
  ('F -> FOR','F',1,'p_F','syntactic_analyzer.py',499),
  ('CDF -> NUMBER SE NUMBER SE O','CDF',5,'p_CDF','syntactic_analyzer.py',507),
  ('SE -> PIPE','SE',1,'p_PIPE','syntactic_analyzer.py',515),
  ('O -> SUBTRACTION','O',1,'p_O','syntactic_analyzer.py',523),
  ('O -> ADDITION','O',1,'p_O','syntactic_analyzer.py',524),
  ('PA -> PARENTHESIS_OPEN','PA',1,'p_PA','syntactic_analyzer.py',535),
  ('PC -> PARENTHESIS_CLOSE','PC',1,'p_PC','syntactic_analyzer.py',543),
  ('MY -> OPEN_BODY','MY',1,'p_MY','syntactic_analyzer.py',551),
  ('MN -> LESS_OR_EQUAL','MN',1,'p_MN','syntactic_analyzer.py',559),
  ('EMPTY -> <empty>','EMPTY',0,'p_EMPTY','syntactic_analyzer.py',566),
]
