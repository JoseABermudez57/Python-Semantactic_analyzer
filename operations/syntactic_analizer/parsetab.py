
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADDITION ASSIGNMENT BOOLEAN_TYPE DECIMAL_TYPE DOT EQUAL FALSE_VALUE FOR GREATER_OR_EQUAL GREATER_THAN IF INTEGER_TYPE KUNAI LESS_OR_EQUAL LESS_THAN NOT_EQUAL NUMBER OPEN_BODY PARENTHESIS_CLOSE PARENTHESIS_OPEN PIPE QUOTATION_MARKS RETURN STRING_TYPE SUBTRACTION TRUE_VALUE VARIABLE\n\tPROGRAM : BLOCK_CODE\n\t\n    BLOCK_CODE : GV\n            | GC\n            | GF\n            | GCF\n            | PRINT\n            | EMPTY\n    \n    C : GV\n        | GC\n        | GCF\n        | PRINT\n        | EMPTY\n    \n    GV : TD V I VA BLOCK_CODE\n        | TD V BLOCK_CODE\n        | EMPTY\n    \n    TD : INTEGER_TYPE\n        | BOOLEAN_TYPE\n        | DECIMAL_TYPE\n        | STRING_TYPE\n    \n    V : VARIABLE\n    \n    I : ASSIGNMENT\n    \n    VA : NUMBER\n        | NUMBER DOT NUMBER\n        | TRUE_VALUE\n        | FALSE_VALUE\n        | QUOTATION_MARKS V QUOTATION_MARKS\n    \n    GC : CN PA CD PC MY C MN BLOCK_CODE\n        | CN PA CD PC MY MN BLOCK_CODE\n        | EMPTY\n    \n    CN : IF\n    \n    CD : V S V\n        | V S VA\n        | VA S V\n        | VA S VA\n    \n    S : EQUAL\n        | GREATER_THAN\n        | LESS_THAN\n        | GREATER_OR_EQUAL\n        | LESS_OR_EQUAL\n        | NOT_EQUAL\n    \n    GF : TD V ME PR MA MY C RT MN BLOCK_CODE\n        | V ME PR MA MY C MN BLOCK_CODE\n        | TD V ME PR MA MY RT MN BLOCK_CODE\n        | V ME PR MA MY MN BLOCK_CODE\n        | TD V ME MA MY C RT MN BLOCK_CODE\n        | V ME MA MY C MN BLOCK_CODE\n        | TD V ME MA MY RT MN BLOCK_CODE\n        | V ME MA MY MN BLOCK_CODE\n        | EMPTY\n    \n    PR : V\n    \n    ME : LESS_THAN\n    \n    MA : GREATER_THAN\n    \n    RT : RETURN V\n    \n    GCF : F PA CDF PC MY C MN BLOCK_CODE\n        | F PA CDF PC MY MN BLOCK_CODE\n        | EMPTY\n    \n    F :  FOR\n    \n    CDF : NUMBER SE NUMBER SE O\n    \n    SE : PIPE\n    \n    O : SUBTRACTION\n        | ADDITION\n    \n    PA : PARENTHESIS_OPEN\n    \n    PC : PARENTHESIS_CLOSE\n    \n    MY : OPEN_BODY\n    \n    MN : LESS_OR_EQUAL\n    \n    PRINT : KUNAI MY V MN BLOCK_CODE\n          | KUNAI MY VA MN BLOCK_CODE\n          | KUNAI MY CD MN BLOCK_CODE\n          | EMPTY\n    \n\tEMPTY :\n\t'
    
_lr_action_items = {'KUNAI':([0,19,21,28,40,41,42,49,53,69,70,71,72,73,76,77,79,86,91,92,93,98,103,104,106,108,110,115,117,120,122,128,129,134,],[13,-20,13,-64,-22,-24,-25,13,13,13,-65,13,13,-65,13,13,13,13,-23,-26,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'$end':([0,1,2,3,4,5,6,7,8,19,21,30,40,41,42,49,69,70,71,72,73,74,79,91,92,95,96,97,103,104,105,108,110,115,117,118,119,120,121,122,123,128,129,130,131,132,133,134,135,136,137,],[-70,0,-1,-2,-3,-4,-5,-6,-7,-20,-70,-14,-22,-24,-25,-70,-70,-65,-70,-70,-65,-13,-70,-23,-26,-66,-67,-68,-70,-70,-48,-70,-70,-70,-70,-44,-46,-70,-28,-70,-55,-70,-70,-47,-42,-27,-54,-70,-43,-45,-41,]),'INTEGER_TYPE':([0,19,21,28,40,41,42,49,53,69,70,71,72,73,76,77,79,86,91,92,93,98,103,104,106,108,110,115,117,120,122,128,129,134,],[14,-20,14,-64,-22,-24,-25,14,14,14,-65,14,14,-65,14,14,14,14,-23,-26,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'BOOLEAN_TYPE':([0,19,21,28,40,41,42,49,53,69,70,71,72,73,76,77,79,86,91,92,93,98,103,104,106,108,110,115,117,120,122,128,129,134,],[15,-20,15,-64,-22,-24,-25,15,15,15,-65,15,15,-65,15,15,15,15,-23,-26,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'DECIMAL_TYPE':([0,19,21,28,40,41,42,49,53,69,70,71,72,73,76,77,79,86,91,92,93,98,103,104,106,108,110,115,117,120,122,128,129,134,],[16,-20,16,-64,-22,-24,-25,16,16,16,-65,16,16,-65,16,16,16,16,-23,-26,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'STRING_TYPE':([0,19,21,28,40,41,42,49,53,69,70,71,72,73,76,77,79,86,91,92,93,98,103,104,106,108,110,115,117,120,122,128,129,134,],[17,-20,17,-64,-22,-24,-25,17,17,17,-65,17,17,-65,17,17,17,17,-23,-26,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'IF':([0,19,21,28,40,41,42,49,53,69,70,71,72,73,76,77,79,86,91,92,93,98,103,104,106,108,110,115,117,120,122,128,129,134,],[18,-20,18,-64,-22,-24,-25,18,18,18,-65,18,18,-65,18,18,18,18,-23,-26,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'VARIABLE':([0,9,14,15,16,17,19,21,22,23,24,25,27,28,31,40,41,42,43,49,56,57,58,59,60,61,62,63,69,70,71,72,73,79,85,91,92,101,103,104,106,108,110,115,117,120,122,128,129,134,],[19,19,-16,-17,-18,-19,-20,19,19,-51,19,-62,19,-64,19,-22,-24,-25,19,19,19,-35,-36,-37,-38,-39,-40,19,19,-39,19,19,-65,19,19,-23,-26,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'FOR':([0,19,21,28,40,41,42,49,53,69,70,71,72,73,76,77,79,86,91,92,93,98,103,104,106,108,110,115,117,120,122,128,129,134,],[20,-20,20,-64,-22,-24,-25,20,20,20,-65,20,20,-65,20,20,20,20,-23,-26,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'LESS_OR_EQUAL':([3,4,5,6,7,8,19,21,28,30,38,39,40,41,42,46,47,48,49,53,69,70,71,72,73,74,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,95,96,97,100,102,103,104,105,106,107,108,109,110,113,114,115,116,117,118,119,120,121,122,123,127,128,129,130,131,132,133,134,135,136,137,],[-2,-3,-4,-5,-6,-7,-20,-70,-64,-14,61,61,-22,-24,-25,70,70,73,-70,73,-70,-65,-70,-70,-65,-13,73,73,-70,-8,-9,-10,-11,-12,73,-31,-32,-34,-33,-23,-26,73,-66,-67,-68,73,73,-70,-70,-48,-70,73,-70,73,-70,73,73,-70,-53,-70,-44,-46,-70,-28,-70,-55,73,-70,-70,-47,-42,-27,-54,-70,-43,-45,-41,]),'RETURN':([3,4,5,6,7,8,19,21,28,30,40,41,42,49,69,70,71,72,73,74,76,79,80,81,82,83,84,91,92,95,96,97,98,99,103,104,105,106,108,110,112,115,117,118,119,120,121,122,123,128,129,130,131,132,133,134,135,136,137,],[-2,-3,-4,-5,-6,-7,-20,-70,-64,-14,-22,-24,-25,-70,-70,-65,-70,-70,-65,-13,101,-70,-8,-9,-10,-11,-12,-23,-26,-66,-67,-68,101,101,-70,-70,-48,-70,-70,-70,101,-70,-70,-44,-46,-70,-28,-70,-55,-70,-70,-47,-42,-27,-54,-70,-43,-45,-41,]),'LESS_THAN':([10,19,21,38,39,40,41,42,46,47,91,92,],[23,-20,23,59,59,-22,-24,-25,59,59,-23,-26,]),'PARENTHESIS_OPEN':([11,12,18,20,],[25,25,-30,-57,]),'OPEN_BODY':([13,35,36,51,52,54,55,66,75,],[28,28,-52,28,28,28,-63,28,28,]),'ASSIGNMENT':([19,21,106,],[-20,32,32,]),'GREATER_THAN':([19,22,23,31,33,34,38,39,40,41,42,46,47,50,91,92,],[-20,36,-51,36,-50,36,58,58,-22,-24,-25,58,58,36,-23,-26,]),'EQUAL':([19,38,39,40,41,42,46,47,91,92,],[-20,57,57,-22,-24,-25,57,57,-23,-26,]),'GREATER_OR_EQUAL':([19,38,39,40,41,42,46,47,91,92,],[-20,60,60,-22,-24,-25,60,60,-23,-26,]),'NOT_EQUAL':([19,38,39,40,41,42,46,47,91,92,],[-20,62,62,-22,-24,-25,62,62,-23,-26,]),'QUOTATION_MARKS':([19,24,25,27,28,29,32,56,57,58,59,60,61,62,63,65,70,],[-20,43,-62,43,-64,43,-21,43,-35,-36,-37,-38,-39,-40,43,92,-39,]),'PARENTHESIS_CLOSE':([19,37,40,41,42,44,87,88,89,90,91,92,124,125,126,],[-20,55,-22,-24,-25,55,-31,-32,-34,-33,-23,-26,-58,-60,-61,]),'NUMBER':([24,25,26,27,28,29,32,56,57,58,59,60,61,62,63,64,67,68,70,],[40,-62,45,40,-64,40,-21,40,-35,-36,-37,-38,-39,-40,40,91,94,-59,-39,]),'TRUE_VALUE':([24,25,27,28,29,32,56,57,58,59,60,61,62,63,70,],[41,-62,41,-64,41,-21,41,-35,-36,-37,-38,-39,-40,41,-39,]),'FALSE_VALUE':([24,25,27,28,29,32,56,57,58,59,60,61,62,63,70,],[42,-62,42,-64,42,-21,42,-35,-36,-37,-38,-39,-40,42,-39,]),'DOT':([40,],[64,]),'PIPE':([45,94,],[68,68,]),'SUBTRACTION':([68,111,],[-59,125,]),'ADDITION':([68,111,],[-59,126,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'BLOCK_CODE':([0,21,49,69,71,72,79,103,104,106,108,110,115,117,120,122,128,129,134,],[2,30,74,95,96,97,105,118,119,30,121,123,130,131,132,133,135,136,137,]),'GV':([0,21,49,53,69,71,72,76,77,79,86,93,98,103,104,106,108,110,115,117,120,122,128,129,134,],[3,3,3,80,3,3,3,80,80,3,80,80,80,3,3,3,3,3,3,3,3,3,3,3,3,]),'GC':([0,21,49,53,69,71,72,76,77,79,86,93,98,103,104,106,108,110,115,117,120,122,128,129,134,],[4,4,4,81,4,4,4,81,81,4,81,81,81,4,4,4,4,4,4,4,4,4,4,4,4,]),'GF':([0,21,49,69,71,72,79,103,104,106,108,110,115,117,120,122,128,129,134,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'GCF':([0,21,49,53,69,71,72,76,77,79,86,93,98,103,104,106,108,110,115,117,120,122,128,129,134,],[6,6,6,82,6,6,6,82,82,6,82,82,82,6,6,6,6,6,6,6,6,6,6,6,6,]),'PRINT':([0,21,49,53,69,71,72,76,77,79,86,93,98,103,104,106,108,110,115,117,120,122,128,129,134,],[7,7,7,83,7,7,7,83,83,7,83,83,83,7,7,7,7,7,7,7,7,7,7,7,7,]),'EMPTY':([0,21,49,53,69,71,72,76,77,79,86,93,98,103,104,106,108,110,115,117,120,122,128,129,134,],[8,8,8,84,8,8,8,84,84,8,84,84,84,8,8,8,8,8,8,8,8,8,8,8,8,]),'TD':([0,21,49,53,69,71,72,76,77,79,86,93,98,103,104,106,108,110,115,117,120,122,128,129,134,],[9,9,9,85,9,9,9,85,85,9,85,85,85,9,9,9,9,9,9,9,9,9,9,9,9,]),'V':([0,9,21,22,24,27,31,43,49,56,63,69,71,72,79,85,101,103,104,106,108,110,115,117,120,122,128,129,134,],[10,21,10,33,38,46,33,65,10,87,90,10,10,10,10,106,116,10,10,10,10,10,10,10,10,10,10,10,10,]),'CN':([0,21,49,53,69,71,72,76,77,79,86,93,98,103,104,106,108,110,115,117,120,122,128,129,134,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'F':([0,21,49,53,69,71,72,76,77,79,86,93,98,103,104,106,108,110,115,117,120,122,128,129,134,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'ME':([10,21,],[22,31,]),'PA':([11,12,],[24,26,]),'MY':([13,35,51,52,54,66,75,],[27,53,76,77,86,93,98,]),'I':([21,106,],[29,29,]),'PR':([22,31,],[34,50,]),'MA':([22,31,34,50,],[35,51,52,75,]),'CD':([24,27,],[37,48,]),'VA':([24,27,29,56,63,],[39,47,49,88,89,]),'CDF':([26,],[44,]),'PC':([37,44,],[54,66,]),'S':([38,39,46,47,],[56,63,56,63,]),'SE':([45,94,],[67,111,]),'MN':([46,47,48,53,77,78,86,93,100,102,107,109,113,114,127,],[69,71,72,79,103,104,108,110,115,117,120,122,128,129,134,]),'C':([53,76,77,86,93,98,],[78,99,102,107,109,112,]),'RT':([76,98,99,112,],[100,113,114,127,]),'O':([111,],[124,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> BLOCK_CODE','PROGRAM',1,'p_PROGRAM','syntactic_analyzer.py',96),
  ('BLOCK_CODE -> GV','BLOCK_CODE',1,'p_BLOCK_CODE','syntactic_analyzer.py',103),
  ('BLOCK_CODE -> GC','BLOCK_CODE',1,'p_BLOCK_CODE','syntactic_analyzer.py',104),
  ('BLOCK_CODE -> GF','BLOCK_CODE',1,'p_BLOCK_CODE','syntactic_analyzer.py',105),
  ('BLOCK_CODE -> GCF','BLOCK_CODE',1,'p_BLOCK_CODE','syntactic_analyzer.py',106),
  ('BLOCK_CODE -> PRINT','BLOCK_CODE',1,'p_BLOCK_CODE','syntactic_analyzer.py',107),
  ('BLOCK_CODE -> EMPTY','BLOCK_CODE',1,'p_BLOCK_CODE','syntactic_analyzer.py',108),
  ('C -> GV','C',1,'p_C','syntactic_analyzer.py',119),
  ('C -> GC','C',1,'p_C','syntactic_analyzer.py',120),
  ('C -> GCF','C',1,'p_C','syntactic_analyzer.py',121),
  ('C -> PRINT','C',1,'p_C','syntactic_analyzer.py',122),
  ('C -> EMPTY','C',1,'p_C','syntactic_analyzer.py',123),
  ('GV -> TD V I VA BLOCK_CODE','GV',5,'p_GV','syntactic_analyzer.py',134),
  ('GV -> TD V BLOCK_CODE','GV',3,'p_GV','syntactic_analyzer.py',135),
  ('GV -> EMPTY','GV',1,'p_GV','syntactic_analyzer.py',136),
  ('TD -> INTEGER_TYPE','TD',1,'p_TD','syntactic_analyzer.py',155),
  ('TD -> BOOLEAN_TYPE','TD',1,'p_TD','syntactic_analyzer.py',156),
  ('TD -> DECIMAL_TYPE','TD',1,'p_TD','syntactic_analyzer.py',157),
  ('TD -> STRING_TYPE','TD',1,'p_TD','syntactic_analyzer.py',158),
  ('V -> VARIABLE','V',1,'p_V','syntactic_analyzer.py',166),
  ('I -> ASSIGNMENT','I',1,'p_I','syntactic_analyzer.py',174),
  ('VA -> NUMBER','VA',1,'p_VA','syntactic_analyzer.py',182),
  ('VA -> NUMBER DOT NUMBER','VA',3,'p_VA','syntactic_analyzer.py',183),
  ('VA -> TRUE_VALUE','VA',1,'p_VA','syntactic_analyzer.py',184),
  ('VA -> FALSE_VALUE','VA',1,'p_VA','syntactic_analyzer.py',185),
  ('VA -> QUOTATION_MARKS V QUOTATION_MARKS','VA',3,'p_VA','syntactic_analyzer.py',186),
  ('GC -> CN PA CD PC MY C MN BLOCK_CODE','GC',8,'p_GC','syntactic_analyzer.py',197),
  ('GC -> CN PA CD PC MY MN BLOCK_CODE','GC',7,'p_GC','syntactic_analyzer.py',198),
  ('GC -> EMPTY','GC',1,'p_GC','syntactic_analyzer.py',199),
  ('CN -> IF','CN',1,'p_CN','syntactic_analyzer.py',212),
  ('CD -> V S V','CD',3,'p_CD','syntactic_analyzer.py',220),
  ('CD -> V S VA','CD',3,'p_CD','syntactic_analyzer.py',221),
  ('CD -> VA S V','CD',3,'p_CD','syntactic_analyzer.py',222),
  ('CD -> VA S VA','CD',3,'p_CD','syntactic_analyzer.py',223),
  ('S -> EQUAL','S',1,'p_S','syntactic_analyzer.py',231),
  ('S -> GREATER_THAN','S',1,'p_S','syntactic_analyzer.py',232),
  ('S -> LESS_THAN','S',1,'p_S','syntactic_analyzer.py',233),
  ('S -> GREATER_OR_EQUAL','S',1,'p_S','syntactic_analyzer.py',234),
  ('S -> LESS_OR_EQUAL','S',1,'p_S','syntactic_analyzer.py',235),
  ('S -> NOT_EQUAL','S',1,'p_S','syntactic_analyzer.py',236),
  ('GF -> TD V ME PR MA MY C RT MN BLOCK_CODE','GF',10,'p_GF','syntactic_analyzer.py',244),
  ('GF -> V ME PR MA MY C MN BLOCK_CODE','GF',8,'p_GF','syntactic_analyzer.py',245),
  ('GF -> TD V ME PR MA MY RT MN BLOCK_CODE','GF',9,'p_GF','syntactic_analyzer.py',246),
  ('GF -> V ME PR MA MY MN BLOCK_CODE','GF',7,'p_GF','syntactic_analyzer.py',247),
  ('GF -> TD V ME MA MY C RT MN BLOCK_CODE','GF',9,'p_GF','syntactic_analyzer.py',248),
  ('GF -> V ME MA MY C MN BLOCK_CODE','GF',7,'p_GF','syntactic_analyzer.py',249),
  ('GF -> TD V ME MA MY RT MN BLOCK_CODE','GF',8,'p_GF','syntactic_analyzer.py',250),
  ('GF -> V ME MA MY MN BLOCK_CODE','GF',6,'p_GF','syntactic_analyzer.py',251),
  ('GF -> EMPTY','GF',1,'p_GF','syntactic_analyzer.py',252),
  ('PR -> V','PR',1,'p_PR','syntactic_analyzer.py',280),
  ('ME -> LESS_THAN','ME',1,'p_ME','syntactic_analyzer.py',288),
  ('MA -> GREATER_THAN','MA',1,'p_MA','syntactic_analyzer.py',296),
  ('RT -> RETURN V','RT',2,'p_RT','syntactic_analyzer.py',304),
  ('GCF -> F PA CDF PC MY C MN BLOCK_CODE','GCF',8,'p_GCF','syntactic_analyzer.py',312),
  ('GCF -> F PA CDF PC MY MN BLOCK_CODE','GCF',7,'p_GCF','syntactic_analyzer.py',313),
  ('GCF -> EMPTY','GCF',1,'p_GCF','syntactic_analyzer.py',314),
  ('F -> FOR','F',1,'p_F','syntactic_analyzer.py',327),
  ('CDF -> NUMBER SE NUMBER SE O','CDF',5,'p_CDF','syntactic_analyzer.py',335),
  ('SE -> PIPE','SE',1,'p_PIPE','syntactic_analyzer.py',343),
  ('O -> SUBTRACTION','O',1,'p_O','syntactic_analyzer.py',351),
  ('O -> ADDITION','O',1,'p_O','syntactic_analyzer.py',352),
  ('PA -> PARENTHESIS_OPEN','PA',1,'p_PA','syntactic_analyzer.py',363),
  ('PC -> PARENTHESIS_CLOSE','PC',1,'p_PC','syntactic_analyzer.py',371),
  ('MY -> OPEN_BODY','MY',1,'p_MY','syntactic_analyzer.py',379),
  ('MN -> LESS_OR_EQUAL','MN',1,'p_MN','syntactic_analyzer.py',387),
  ('PRINT -> KUNAI MY V MN BLOCK_CODE','PRINT',5,'p_PRINT','syntactic_analyzer.py',395),
  ('PRINT -> KUNAI MY VA MN BLOCK_CODE','PRINT',5,'p_PRINT','syntactic_analyzer.py',396),
  ('PRINT -> KUNAI MY CD MN BLOCK_CODE','PRINT',5,'p_PRINT','syntactic_analyzer.py',397),
  ('PRINT -> EMPTY','PRINT',1,'p_PRINT','syntactic_analyzer.py',398),
  ('EMPTY -> <empty>','EMPTY',0,'p_empty','syntactic_analyzer.py',408),
]
