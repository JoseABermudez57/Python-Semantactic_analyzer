Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> PROGRAM
Rule 1     PROGRAM -> BLOCK_CODE
Rule 2     BLOCK_CODE -> GV
Rule 3     BLOCK_CODE -> GC
Rule 4     BLOCK_CODE -> GF
Rule 5     BLOCK_CODE -> GCF
Rule 6     BLOCK_CODE -> PRINT
Rule 7     BLOCK_CODE -> EMPTY
Rule 8     C -> GV
Rule 9     C -> GC
Rule 10    C -> GCF
Rule 11    C -> PRINT
Rule 12    C -> EMPTY
Rule 13    GV -> TD V I VA BLOCK_CODE
Rule 14    GV -> TD V BLOCK_CODE
Rule 15    GV -> EMPTY
Rule 16    PRINT -> AO VAP AC BLOCK_CODE
Rule 17    PRINT -> EMPTY
Rule 18    AO -> SUBTRACTION MA
Rule 19    VAP -> V
Rule 20    VAP -> VA
Rule 21    VAP -> CD
Rule 22    VAP -> FR
Rule 23    FR -> TD V ME PR MA
Rule 24    FR -> TD V ME MA
Rule 25    AC -> ME SUBTRACTION
Rule 26    TD -> INTEGER_TYPE
Rule 27    TD -> BOOLEAN_TYPE
Rule 28    TD -> DECIMAL_TYPE
Rule 29    TD -> STRING_TYPE
Rule 30    V -> VARIABLE
Rule 31    I -> ASSIGNMENT
Rule 32    VA -> NUMBER
Rule 33    VA -> NUMBER DOT NUMBER
Rule 34    VA -> TRUE_VALUE
Rule 35    VA -> FALSE_VALUE
Rule 36    VA -> QUOTATION_MARKS V QUOTATION_MARKS
Rule 37    GC -> CN PA CD PC MY C MN BLOCK_CODE
Rule 38    GC -> CN PA CD PC MY MN BLOCK_CODE
Rule 39    GC -> EMPTY
Rule 40    CN -> IF
Rule 41    CD -> V S V
Rule 42    CD -> V S VA
Rule 43    CD -> VA S V
Rule 44    CD -> VA S VA
Rule 45    S -> EQUAL
Rule 46    S -> GREATER_THAN
Rule 47    S -> LESS_THAN
Rule 48    S -> GREATER_OR_EQUAL
Rule 49    S -> LESS_OR_EQUAL
Rule 50    S -> NOT_EQUAL
Rule 51    GF -> TD V ME PR MA MY C RT MN BLOCK_CODE
Rule 52    GF -> V ME PR MA MY C MN BLOCK_CODE
Rule 53    GF -> TD V ME PR MA MY RT MN BLOCK_CODE
Rule 54    GF -> V ME PR MA MY MN BLOCK_CODE
Rule 55    GF -> TD V ME MA MY C RT MN BLOCK_CODE
Rule 56    GF -> V ME MA MY C MN BLOCK_CODE
Rule 57    GF -> TD V ME MA MY RT MN BLOCK_CODE
Rule 58    GF -> V ME MA MY MN BLOCK_CODE
Rule 59    GF -> EMPTY
Rule 60    PR -> V
Rule 61    ME -> LESS_THAN
Rule 62    MA -> GREATER_THAN
Rule 63    RT -> RETURN V
Rule 64    GCF -> F PA CDF PC MY C MN BLOCK_CODE
Rule 65    GCF -> F PA CDF PC MY MN BLOCK_CODE
Rule 66    GCF -> EMPTY
Rule 67    F -> FOR
Rule 68    CDF -> NUMBER SE NUMBER SE O
Rule 69    SE -> PIPE
Rule 70    O -> SUBTRACTION
Rule 71    O -> ADDITION
Rule 72    PA -> PARENTHESIS_OPEN
Rule 73    PC -> PARENTHESIS_CLOSE
Rule 74    MY -> OPEN_BODY
Rule 75    MN -> LESS_OR_EQUAL
Rule 76    EMPTY -> <empty>

Terminals, with rules where they appear

ADDITION             : 71
ASSIGNMENT           : 31
BOOLEAN_TYPE         : 27
DECIMAL_TYPE         : 28
DOT                  : 33
EQUAL                : 45
FALSE_VALUE          : 35
FOR                  : 67
GREATER_OR_EQUAL     : 48
GREATER_THAN         : 46 62
IF                   : 40
INTEGER_TYPE         : 26
LESS_OR_EQUAL        : 49 75
LESS_THAN            : 47 61
NOT_EQUAL            : 50
NUMBER               : 32 33 33 68 68
OPEN_BODY            : 74
PARENTHESIS_CLOSE    : 73
PARENTHESIS_OPEN     : 72
PIPE                 : 69
QUOTATION_MARKS      : 36 36
RETURN               : 63
STRING_TYPE          : 29
SUBTRACTION          : 18 25 70
TRUE_VALUE           : 34
VARIABLE             : 30
error                : 

Nonterminals, with rules where they appear

AC                   : 16
AO                   : 16
BLOCK_CODE           : 1 13 14 16 37 38 51 52 53 54 55 56 57 58 64 65
C                    : 37 51 52 55 56 64
CD                   : 21 37 38
CDF                  : 64 65
CN                   : 37 38
EMPTY                : 7 12 15 17 39 59 66
F                    : 64 65
FR                   : 22
GC                   : 3 9
GCF                  : 5 10
GF                   : 4
GV                   : 2 8
I                    : 13
MA                   : 18 23 24 51 52 53 54 55 56 57 58
ME                   : 23 24 25 51 52 53 54 55 56 57 58
MN                   : 37 38 51 52 53 54 55 56 57 58 64 65
MY                   : 37 38 51 52 53 54 55 56 57 58 64 65
O                    : 68
PA                   : 37 38 64 65
PC                   : 37 38 64 65
PR                   : 23 51 52 53 54
PRINT                : 6 11
PROGRAM              : 0
RT                   : 51 53 55 57
S                    : 41 42 43 44
SE                   : 68 68
TD                   : 13 14 23 24 51 53 55 57
V                    : 13 14 19 23 24 36 41 41 42 43 51 52 53 54 55 56 57 58 60 63
VA                   : 13 20 42 43 44 44
VAP                  : 16

Parsing method: LALR

state 0

    (0) S' -> . PROGRAM
    (1) PROGRAM -> . BLOCK_CODE
    (2) BLOCK_CODE -> . GV
    (3) BLOCK_CODE -> . GC
    (4) BLOCK_CODE -> . GF
    (5) BLOCK_CODE -> . GCF
    (6) BLOCK_CODE -> . PRINT
    (7) BLOCK_CODE -> . EMPTY
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (51) GF -> . TD V ME PR MA MY C RT MN BLOCK_CODE
    (52) GF -> . V ME PR MA MY C MN BLOCK_CODE
    (53) GF -> . TD V ME PR MA MY RT MN BLOCK_CODE
    (54) GF -> . V ME PR MA MY MN BLOCK_CODE
    (55) GF -> . TD V ME MA MY C RT MN BLOCK_CODE
    (56) GF -> . V ME MA MY C MN BLOCK_CODE
    (57) GF -> . TD V ME MA MY RT MN BLOCK_CODE
    (58) GF -> . V ME MA MY MN BLOCK_CODE
    (59) GF -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (30) V -> . VARIABLE
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

    $end            reduce using rule 76 (EMPTY -> .)
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

    PROGRAM                        shift and go to state 1
    BLOCK_CODE                     shift and go to state 2
    GV                             shift and go to state 3
    GC                             shift and go to state 4
    GF                             shift and go to state 5
    GCF                            shift and go to state 6
    PRINT                          shift and go to state 7
    EMPTY                          shift and go to state 8
    TD                             shift and go to state 9
    V                              shift and go to state 10
    CN                             shift and go to state 11
    F                              shift and go to state 12
    AO                             shift and go to state 13

state 1

    (0) S' -> PROGRAM .



state 2

    (1) PROGRAM -> BLOCK_CODE .

    $end            reduce using rule 1 (PROGRAM -> BLOCK_CODE .)


state 3

    (2) BLOCK_CODE -> GV .

    $end            reduce using rule 2 (BLOCK_CODE -> GV .)
    LESS_OR_EQUAL   reduce using rule 2 (BLOCK_CODE -> GV .)
    RETURN          reduce using rule 2 (BLOCK_CODE -> GV .)


state 4

    (3) BLOCK_CODE -> GC .

    $end            reduce using rule 3 (BLOCK_CODE -> GC .)
    LESS_OR_EQUAL   reduce using rule 3 (BLOCK_CODE -> GC .)
    RETURN          reduce using rule 3 (BLOCK_CODE -> GC .)


state 5

    (4) BLOCK_CODE -> GF .

    $end            reduce using rule 4 (BLOCK_CODE -> GF .)
    LESS_OR_EQUAL   reduce using rule 4 (BLOCK_CODE -> GF .)
    RETURN          reduce using rule 4 (BLOCK_CODE -> GF .)


state 6

    (5) BLOCK_CODE -> GCF .

    $end            reduce using rule 5 (BLOCK_CODE -> GCF .)
    LESS_OR_EQUAL   reduce using rule 5 (BLOCK_CODE -> GCF .)
    RETURN          reduce using rule 5 (BLOCK_CODE -> GCF .)


state 7

    (6) BLOCK_CODE -> PRINT .

    $end            reduce using rule 6 (BLOCK_CODE -> PRINT .)
    LESS_OR_EQUAL   reduce using rule 6 (BLOCK_CODE -> PRINT .)
    RETURN          reduce using rule 6 (BLOCK_CODE -> PRINT .)


state 8

    (7) BLOCK_CODE -> EMPTY .
    (15) GV -> EMPTY .
    (39) GC -> EMPTY .
    (59) GF -> EMPTY .
    (66) GCF -> EMPTY .
    (17) PRINT -> EMPTY .

  ! reduce/reduce conflict for $end resolved using rule 7 (BLOCK_CODE -> EMPTY .)
  ! reduce/reduce conflict for LESS_OR_EQUAL resolved using rule 7 (BLOCK_CODE -> EMPTY .)
  ! reduce/reduce conflict for RETURN resolved using rule 7 (BLOCK_CODE -> EMPTY .)
  ! reduce/reduce conflict for $end resolved using rule 7 (BLOCK_CODE -> EMPTY .)
  ! reduce/reduce conflict for LESS_OR_EQUAL resolved using rule 7 (BLOCK_CODE -> EMPTY .)
  ! reduce/reduce conflict for RETURN resolved using rule 7 (BLOCK_CODE -> EMPTY .)
  ! reduce/reduce conflict for $end resolved using rule 7 (BLOCK_CODE -> EMPTY .)
  ! reduce/reduce conflict for LESS_OR_EQUAL resolved using rule 7 (BLOCK_CODE -> EMPTY .)
  ! reduce/reduce conflict for RETURN resolved using rule 7 (BLOCK_CODE -> EMPTY .)
  ! reduce/reduce conflict for $end resolved using rule 7 (BLOCK_CODE -> EMPTY .)
  ! reduce/reduce conflict for LESS_OR_EQUAL resolved using rule 7 (BLOCK_CODE -> EMPTY .)
  ! reduce/reduce conflict for RETURN resolved using rule 7 (BLOCK_CODE -> EMPTY .)
  ! reduce/reduce conflict for $end resolved using rule 7 (BLOCK_CODE -> EMPTY .)
  ! reduce/reduce conflict for LESS_OR_EQUAL resolved using rule 7 (BLOCK_CODE -> EMPTY .)
  ! reduce/reduce conflict for RETURN resolved using rule 7 (BLOCK_CODE -> EMPTY .)
    $end            reduce using rule 7 (BLOCK_CODE -> EMPTY .)
    LESS_OR_EQUAL   reduce using rule 7 (BLOCK_CODE -> EMPTY .)
    RETURN          reduce using rule 7 (BLOCK_CODE -> EMPTY .)

  ! $end            [ reduce using rule 15 (GV -> EMPTY .) ]
  ! LESS_OR_EQUAL   [ reduce using rule 15 (GV -> EMPTY .) ]
  ! RETURN          [ reduce using rule 15 (GV -> EMPTY .) ]
  ! $end            [ reduce using rule 39 (GC -> EMPTY .) ]
  ! LESS_OR_EQUAL   [ reduce using rule 39 (GC -> EMPTY .) ]
  ! RETURN          [ reduce using rule 39 (GC -> EMPTY .) ]
  ! $end            [ reduce using rule 59 (GF -> EMPTY .) ]
  ! LESS_OR_EQUAL   [ reduce using rule 59 (GF -> EMPTY .) ]
  ! RETURN          [ reduce using rule 59 (GF -> EMPTY .) ]
  ! $end            [ reduce using rule 66 (GCF -> EMPTY .) ]
  ! LESS_OR_EQUAL   [ reduce using rule 66 (GCF -> EMPTY .) ]
  ! RETURN          [ reduce using rule 66 (GCF -> EMPTY .) ]
  ! $end            [ reduce using rule 17 (PRINT -> EMPTY .) ]
  ! LESS_OR_EQUAL   [ reduce using rule 17 (PRINT -> EMPTY .) ]
  ! RETURN          [ reduce using rule 17 (PRINT -> EMPTY .) ]


state 9

    (13) GV -> TD . V I VA BLOCK_CODE
    (14) GV -> TD . V BLOCK_CODE
    (51) GF -> TD . V ME PR MA MY C RT MN BLOCK_CODE
    (53) GF -> TD . V ME PR MA MY RT MN BLOCK_CODE
    (55) GF -> TD . V ME MA MY C RT MN BLOCK_CODE
    (57) GF -> TD . V ME MA MY RT MN BLOCK_CODE
    (30) V -> . VARIABLE

    VARIABLE        shift and go to state 19

    V                              shift and go to state 22

state 10

    (52) GF -> V . ME PR MA MY C MN BLOCK_CODE
    (54) GF -> V . ME PR MA MY MN BLOCK_CODE
    (56) GF -> V . ME MA MY C MN BLOCK_CODE
    (58) GF -> V . ME MA MY MN BLOCK_CODE
    (61) ME -> . LESS_THAN

    LESS_THAN       shift and go to state 24

    ME                             shift and go to state 23

state 11

    (37) GC -> CN . PA CD PC MY C MN BLOCK_CODE
    (38) GC -> CN . PA CD PC MY MN BLOCK_CODE
    (72) PA -> . PARENTHESIS_OPEN

    PARENTHESIS_OPEN shift and go to state 26

    PA                             shift and go to state 25

state 12

    (64) GCF -> F . PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> F . PA CDF PC MY MN BLOCK_CODE
    (72) PA -> . PARENTHESIS_OPEN

    PARENTHESIS_OPEN shift and go to state 26

    PA                             shift and go to state 27

state 13

    (16) PRINT -> AO . VAP AC BLOCK_CODE
    (19) VAP -> . V
    (20) VAP -> . VA
    (21) VAP -> . CD
    (22) VAP -> . FR
    (30) V -> . VARIABLE
    (32) VA -> . NUMBER
    (33) VA -> . NUMBER DOT NUMBER
    (34) VA -> . TRUE_VALUE
    (35) VA -> . FALSE_VALUE
    (36) VA -> . QUOTATION_MARKS V QUOTATION_MARKS
    (41) CD -> . V S V
    (42) CD -> . V S VA
    (43) CD -> . VA S V
    (44) CD -> . VA S VA
    (23) FR -> . TD V ME PR MA
    (24) FR -> . TD V ME MA
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE

    VARIABLE        shift and go to state 19
    NUMBER          shift and go to state 33
    TRUE_VALUE      shift and go to state 34
    FALSE_VALUE     shift and go to state 35
    QUOTATION_MARKS shift and go to state 36
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17

    VAP                            shift and go to state 28
    V                              shift and go to state 29
    VA                             shift and go to state 30
    CD                             shift and go to state 31
    FR                             shift and go to state 32
    TD                             shift and go to state 37

state 14

    (26) TD -> INTEGER_TYPE .

    VARIABLE        reduce using rule 26 (TD -> INTEGER_TYPE .)


state 15

    (27) TD -> BOOLEAN_TYPE .

    VARIABLE        reduce using rule 27 (TD -> BOOLEAN_TYPE .)


state 16

    (28) TD -> DECIMAL_TYPE .

    VARIABLE        reduce using rule 28 (TD -> DECIMAL_TYPE .)


state 17

    (29) TD -> STRING_TYPE .

    VARIABLE        reduce using rule 29 (TD -> STRING_TYPE .)


state 18

    (40) CN -> IF .

    PARENTHESIS_OPEN reduce using rule 40 (CN -> IF .)


state 19

    (30) V -> VARIABLE .

    LESS_THAN       reduce using rule 30 (V -> VARIABLE .)
    ASSIGNMENT      reduce using rule 30 (V -> VARIABLE .)
    INTEGER_TYPE    reduce using rule 30 (V -> VARIABLE .)
    BOOLEAN_TYPE    reduce using rule 30 (V -> VARIABLE .)
    DECIMAL_TYPE    reduce using rule 30 (V -> VARIABLE .)
    STRING_TYPE     reduce using rule 30 (V -> VARIABLE .)
    IF              reduce using rule 30 (V -> VARIABLE .)
    VARIABLE        reduce using rule 30 (V -> VARIABLE .)
    FOR             reduce using rule 30 (V -> VARIABLE .)
    SUBTRACTION     reduce using rule 30 (V -> VARIABLE .)
    $end            reduce using rule 30 (V -> VARIABLE .)
    LESS_OR_EQUAL   reduce using rule 30 (V -> VARIABLE .)
    RETURN          reduce using rule 30 (V -> VARIABLE .)
    EQUAL           reduce using rule 30 (V -> VARIABLE .)
    GREATER_THAN    reduce using rule 30 (V -> VARIABLE .)
    GREATER_OR_EQUAL reduce using rule 30 (V -> VARIABLE .)
    NOT_EQUAL       reduce using rule 30 (V -> VARIABLE .)
    QUOTATION_MARKS reduce using rule 30 (V -> VARIABLE .)
    PARENTHESIS_CLOSE reduce using rule 30 (V -> VARIABLE .)


state 20

    (67) F -> FOR .

    PARENTHESIS_OPEN reduce using rule 67 (F -> FOR .)


state 21

    (18) AO -> SUBTRACTION . MA
    (62) MA -> . GREATER_THAN

    GREATER_THAN    shift and go to state 39

    MA                             shift and go to state 38

state 22

    (13) GV -> TD V . I VA BLOCK_CODE
    (14) GV -> TD V . BLOCK_CODE
    (51) GF -> TD V . ME PR MA MY C RT MN BLOCK_CODE
    (53) GF -> TD V . ME PR MA MY RT MN BLOCK_CODE
    (55) GF -> TD V . ME MA MY C RT MN BLOCK_CODE
    (57) GF -> TD V . ME MA MY RT MN BLOCK_CODE
    (31) I -> . ASSIGNMENT
    (2) BLOCK_CODE -> . GV
    (3) BLOCK_CODE -> . GC
    (4) BLOCK_CODE -> . GF
    (5) BLOCK_CODE -> . GCF
    (6) BLOCK_CODE -> . PRINT
    (7) BLOCK_CODE -> . EMPTY
    (61) ME -> . LESS_THAN
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (51) GF -> . TD V ME PR MA MY C RT MN BLOCK_CODE
    (52) GF -> . V ME PR MA MY C MN BLOCK_CODE
    (53) GF -> . TD V ME PR MA MY RT MN BLOCK_CODE
    (54) GF -> . V ME PR MA MY MN BLOCK_CODE
    (55) GF -> . TD V ME MA MY C RT MN BLOCK_CODE
    (56) GF -> . V ME MA MY C MN BLOCK_CODE
    (57) GF -> . TD V ME MA MY RT MN BLOCK_CODE
    (58) GF -> . V ME MA MY MN BLOCK_CODE
    (59) GF -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (30) V -> . VARIABLE
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

    ASSIGNMENT      shift and go to state 43
    LESS_THAN       shift and go to state 24
    $end            reduce using rule 76 (EMPTY -> .)
    LESS_OR_EQUAL   reduce using rule 76 (EMPTY -> .)
    RETURN          reduce using rule 76 (EMPTY -> .)
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

    TD                             shift and go to state 9
    V                              shift and go to state 10
    I                              shift and go to state 40
    BLOCK_CODE                     shift and go to state 41
    ME                             shift and go to state 42
    GV                             shift and go to state 3
    GC                             shift and go to state 4
    GF                             shift and go to state 5
    GCF                            shift and go to state 6
    PRINT                          shift and go to state 7
    EMPTY                          shift and go to state 8
    CN                             shift and go to state 11
    F                              shift and go to state 12
    AO                             shift and go to state 13

state 23

    (52) GF -> V ME . PR MA MY C MN BLOCK_CODE
    (54) GF -> V ME . PR MA MY MN BLOCK_CODE
    (56) GF -> V ME . MA MY C MN BLOCK_CODE
    (58) GF -> V ME . MA MY MN BLOCK_CODE
    (60) PR -> . V
    (62) MA -> . GREATER_THAN
    (30) V -> . VARIABLE

    GREATER_THAN    shift and go to state 39
    VARIABLE        shift and go to state 19

    V                              shift and go to state 44
    PR                             shift and go to state 45
    MA                             shift and go to state 46

state 24

    (61) ME -> LESS_THAN .

    GREATER_THAN    reduce using rule 61 (ME -> LESS_THAN .)
    VARIABLE        reduce using rule 61 (ME -> LESS_THAN .)
    SUBTRACTION     reduce using rule 61 (ME -> LESS_THAN .)


state 25

    (37) GC -> CN PA . CD PC MY C MN BLOCK_CODE
    (38) GC -> CN PA . CD PC MY MN BLOCK_CODE
    (41) CD -> . V S V
    (42) CD -> . V S VA
    (43) CD -> . VA S V
    (44) CD -> . VA S VA
    (30) V -> . VARIABLE
    (32) VA -> . NUMBER
    (33) VA -> . NUMBER DOT NUMBER
    (34) VA -> . TRUE_VALUE
    (35) VA -> . FALSE_VALUE
    (36) VA -> . QUOTATION_MARKS V QUOTATION_MARKS

    VARIABLE        shift and go to state 19
    NUMBER          shift and go to state 33
    TRUE_VALUE      shift and go to state 34
    FALSE_VALUE     shift and go to state 35
    QUOTATION_MARKS shift and go to state 36

    CD                             shift and go to state 47
    V                              shift and go to state 48
    VA                             shift and go to state 49

state 26

    (72) PA -> PARENTHESIS_OPEN .

    VARIABLE        reduce using rule 72 (PA -> PARENTHESIS_OPEN .)
    NUMBER          reduce using rule 72 (PA -> PARENTHESIS_OPEN .)
    TRUE_VALUE      reduce using rule 72 (PA -> PARENTHESIS_OPEN .)
    FALSE_VALUE     reduce using rule 72 (PA -> PARENTHESIS_OPEN .)
    QUOTATION_MARKS reduce using rule 72 (PA -> PARENTHESIS_OPEN .)


state 27

    (64) GCF -> F PA . CDF PC MY C MN BLOCK_CODE
    (65) GCF -> F PA . CDF PC MY MN BLOCK_CODE
    (68) CDF -> . NUMBER SE NUMBER SE O

    NUMBER          shift and go to state 51

    CDF                            shift and go to state 50

state 28

    (16) PRINT -> AO VAP . AC BLOCK_CODE
    (25) AC -> . ME SUBTRACTION
    (61) ME -> . LESS_THAN

    LESS_THAN       shift and go to state 24

    AC                             shift and go to state 52
    ME                             shift and go to state 53

state 29

    (19) VAP -> V .
    (41) CD -> V . S V
    (42) CD -> V . S VA
    (45) S -> . EQUAL
    (46) S -> . GREATER_THAN
    (47) S -> . LESS_THAN
    (48) S -> . GREATER_OR_EQUAL
    (49) S -> . LESS_OR_EQUAL
    (50) S -> . NOT_EQUAL

  ! shift/reduce conflict for LESS_THAN resolved as shift
    EQUAL           shift and go to state 55
    GREATER_THAN    shift and go to state 56
    LESS_THAN       shift and go to state 57
    GREATER_OR_EQUAL shift and go to state 58
    LESS_OR_EQUAL   shift and go to state 59
    NOT_EQUAL       shift and go to state 60

  ! LESS_THAN       [ reduce using rule 19 (VAP -> V .) ]

    S                              shift and go to state 54

state 30

    (20) VAP -> VA .
    (43) CD -> VA . S V
    (44) CD -> VA . S VA
    (45) S -> . EQUAL
    (46) S -> . GREATER_THAN
    (47) S -> . LESS_THAN
    (48) S -> . GREATER_OR_EQUAL
    (49) S -> . LESS_OR_EQUAL
    (50) S -> . NOT_EQUAL

  ! shift/reduce conflict for LESS_THAN resolved as shift
    EQUAL           shift and go to state 55
    GREATER_THAN    shift and go to state 56
    LESS_THAN       shift and go to state 57
    GREATER_OR_EQUAL shift and go to state 58
    LESS_OR_EQUAL   shift and go to state 59
    NOT_EQUAL       shift and go to state 60

  ! LESS_THAN       [ reduce using rule 20 (VAP -> VA .) ]

    S                              shift and go to state 61

state 31

    (21) VAP -> CD .

    LESS_THAN       reduce using rule 21 (VAP -> CD .)


state 32

    (22) VAP -> FR .

    LESS_THAN       reduce using rule 22 (VAP -> FR .)


state 33

    (32) VA -> NUMBER .
    (33) VA -> NUMBER . DOT NUMBER

    EQUAL           reduce using rule 32 (VA -> NUMBER .)
    GREATER_THAN    reduce using rule 32 (VA -> NUMBER .)
    LESS_THAN       reduce using rule 32 (VA -> NUMBER .)
    GREATER_OR_EQUAL reduce using rule 32 (VA -> NUMBER .)
    LESS_OR_EQUAL   reduce using rule 32 (VA -> NUMBER .)
    NOT_EQUAL       reduce using rule 32 (VA -> NUMBER .)
    INTEGER_TYPE    reduce using rule 32 (VA -> NUMBER .)
    BOOLEAN_TYPE    reduce using rule 32 (VA -> NUMBER .)
    DECIMAL_TYPE    reduce using rule 32 (VA -> NUMBER .)
    STRING_TYPE     reduce using rule 32 (VA -> NUMBER .)
    IF              reduce using rule 32 (VA -> NUMBER .)
    VARIABLE        reduce using rule 32 (VA -> NUMBER .)
    FOR             reduce using rule 32 (VA -> NUMBER .)
    SUBTRACTION     reduce using rule 32 (VA -> NUMBER .)
    $end            reduce using rule 32 (VA -> NUMBER .)
    RETURN          reduce using rule 32 (VA -> NUMBER .)
    PARENTHESIS_CLOSE reduce using rule 32 (VA -> NUMBER .)
    DOT             shift and go to state 62


state 34

    (34) VA -> TRUE_VALUE .

    EQUAL           reduce using rule 34 (VA -> TRUE_VALUE .)
    GREATER_THAN    reduce using rule 34 (VA -> TRUE_VALUE .)
    LESS_THAN       reduce using rule 34 (VA -> TRUE_VALUE .)
    GREATER_OR_EQUAL reduce using rule 34 (VA -> TRUE_VALUE .)
    LESS_OR_EQUAL   reduce using rule 34 (VA -> TRUE_VALUE .)
    NOT_EQUAL       reduce using rule 34 (VA -> TRUE_VALUE .)
    INTEGER_TYPE    reduce using rule 34 (VA -> TRUE_VALUE .)
    BOOLEAN_TYPE    reduce using rule 34 (VA -> TRUE_VALUE .)
    DECIMAL_TYPE    reduce using rule 34 (VA -> TRUE_VALUE .)
    STRING_TYPE     reduce using rule 34 (VA -> TRUE_VALUE .)
    IF              reduce using rule 34 (VA -> TRUE_VALUE .)
    VARIABLE        reduce using rule 34 (VA -> TRUE_VALUE .)
    FOR             reduce using rule 34 (VA -> TRUE_VALUE .)
    SUBTRACTION     reduce using rule 34 (VA -> TRUE_VALUE .)
    $end            reduce using rule 34 (VA -> TRUE_VALUE .)
    RETURN          reduce using rule 34 (VA -> TRUE_VALUE .)
    PARENTHESIS_CLOSE reduce using rule 34 (VA -> TRUE_VALUE .)


state 35

    (35) VA -> FALSE_VALUE .

    EQUAL           reduce using rule 35 (VA -> FALSE_VALUE .)
    GREATER_THAN    reduce using rule 35 (VA -> FALSE_VALUE .)
    LESS_THAN       reduce using rule 35 (VA -> FALSE_VALUE .)
    GREATER_OR_EQUAL reduce using rule 35 (VA -> FALSE_VALUE .)
    LESS_OR_EQUAL   reduce using rule 35 (VA -> FALSE_VALUE .)
    NOT_EQUAL       reduce using rule 35 (VA -> FALSE_VALUE .)
    INTEGER_TYPE    reduce using rule 35 (VA -> FALSE_VALUE .)
    BOOLEAN_TYPE    reduce using rule 35 (VA -> FALSE_VALUE .)
    DECIMAL_TYPE    reduce using rule 35 (VA -> FALSE_VALUE .)
    STRING_TYPE     reduce using rule 35 (VA -> FALSE_VALUE .)
    IF              reduce using rule 35 (VA -> FALSE_VALUE .)
    VARIABLE        reduce using rule 35 (VA -> FALSE_VALUE .)
    FOR             reduce using rule 35 (VA -> FALSE_VALUE .)
    SUBTRACTION     reduce using rule 35 (VA -> FALSE_VALUE .)
    $end            reduce using rule 35 (VA -> FALSE_VALUE .)
    RETURN          reduce using rule 35 (VA -> FALSE_VALUE .)
    PARENTHESIS_CLOSE reduce using rule 35 (VA -> FALSE_VALUE .)


state 36

    (36) VA -> QUOTATION_MARKS . V QUOTATION_MARKS
    (30) V -> . VARIABLE

    VARIABLE        shift and go to state 19

    V                              shift and go to state 63

state 37

    (23) FR -> TD . V ME PR MA
    (24) FR -> TD . V ME MA
    (30) V -> . VARIABLE

    VARIABLE        shift and go to state 19

    V                              shift and go to state 64

state 38

    (18) AO -> SUBTRACTION MA .

    VARIABLE        reduce using rule 18 (AO -> SUBTRACTION MA .)
    NUMBER          reduce using rule 18 (AO -> SUBTRACTION MA .)
    TRUE_VALUE      reduce using rule 18 (AO -> SUBTRACTION MA .)
    FALSE_VALUE     reduce using rule 18 (AO -> SUBTRACTION MA .)
    QUOTATION_MARKS reduce using rule 18 (AO -> SUBTRACTION MA .)
    INTEGER_TYPE    reduce using rule 18 (AO -> SUBTRACTION MA .)
    BOOLEAN_TYPE    reduce using rule 18 (AO -> SUBTRACTION MA .)
    DECIMAL_TYPE    reduce using rule 18 (AO -> SUBTRACTION MA .)
    STRING_TYPE     reduce using rule 18 (AO -> SUBTRACTION MA .)


state 39

    (62) MA -> GREATER_THAN .

    VARIABLE        reduce using rule 62 (MA -> GREATER_THAN .)
    NUMBER          reduce using rule 62 (MA -> GREATER_THAN .)
    TRUE_VALUE      reduce using rule 62 (MA -> GREATER_THAN .)
    FALSE_VALUE     reduce using rule 62 (MA -> GREATER_THAN .)
    QUOTATION_MARKS reduce using rule 62 (MA -> GREATER_THAN .)
    INTEGER_TYPE    reduce using rule 62 (MA -> GREATER_THAN .)
    BOOLEAN_TYPE    reduce using rule 62 (MA -> GREATER_THAN .)
    DECIMAL_TYPE    reduce using rule 62 (MA -> GREATER_THAN .)
    STRING_TYPE     reduce using rule 62 (MA -> GREATER_THAN .)
    OPEN_BODY       reduce using rule 62 (MA -> GREATER_THAN .)
    LESS_THAN       reduce using rule 62 (MA -> GREATER_THAN .)


state 40

    (13) GV -> TD V I . VA BLOCK_CODE
    (32) VA -> . NUMBER
    (33) VA -> . NUMBER DOT NUMBER
    (34) VA -> . TRUE_VALUE
    (35) VA -> . FALSE_VALUE
    (36) VA -> . QUOTATION_MARKS V QUOTATION_MARKS

    NUMBER          shift and go to state 33
    TRUE_VALUE      shift and go to state 34
    FALSE_VALUE     shift and go to state 35
    QUOTATION_MARKS shift and go to state 36

    VA                             shift and go to state 65

state 41

    (14) GV -> TD V BLOCK_CODE .

    $end            reduce using rule 14 (GV -> TD V BLOCK_CODE .)
    LESS_OR_EQUAL   reduce using rule 14 (GV -> TD V BLOCK_CODE .)
    RETURN          reduce using rule 14 (GV -> TD V BLOCK_CODE .)


state 42

    (51) GF -> TD V ME . PR MA MY C RT MN BLOCK_CODE
    (53) GF -> TD V ME . PR MA MY RT MN BLOCK_CODE
    (55) GF -> TD V ME . MA MY C RT MN BLOCK_CODE
    (57) GF -> TD V ME . MA MY RT MN BLOCK_CODE
    (60) PR -> . V
    (62) MA -> . GREATER_THAN
    (30) V -> . VARIABLE

    GREATER_THAN    shift and go to state 39
    VARIABLE        shift and go to state 19

    V                              shift and go to state 44
    PR                             shift and go to state 66
    MA                             shift and go to state 67

state 43

    (31) I -> ASSIGNMENT .

    NUMBER          reduce using rule 31 (I -> ASSIGNMENT .)
    TRUE_VALUE      reduce using rule 31 (I -> ASSIGNMENT .)
    FALSE_VALUE     reduce using rule 31 (I -> ASSIGNMENT .)
    QUOTATION_MARKS reduce using rule 31 (I -> ASSIGNMENT .)


state 44

    (60) PR -> V .

    GREATER_THAN    reduce using rule 60 (PR -> V .)


state 45

    (52) GF -> V ME PR . MA MY C MN BLOCK_CODE
    (54) GF -> V ME PR . MA MY MN BLOCK_CODE
    (62) MA -> . GREATER_THAN

    GREATER_THAN    shift and go to state 39

    MA                             shift and go to state 68

state 46

    (56) GF -> V ME MA . MY C MN BLOCK_CODE
    (58) GF -> V ME MA . MY MN BLOCK_CODE
    (74) MY -> . OPEN_BODY

    OPEN_BODY       shift and go to state 70

    MY                             shift and go to state 69

state 47

    (37) GC -> CN PA CD . PC MY C MN BLOCK_CODE
    (38) GC -> CN PA CD . PC MY MN BLOCK_CODE
    (73) PC -> . PARENTHESIS_CLOSE

    PARENTHESIS_CLOSE shift and go to state 72

    PC                             shift and go to state 71

state 48

    (41) CD -> V . S V
    (42) CD -> V . S VA
    (45) S -> . EQUAL
    (46) S -> . GREATER_THAN
    (47) S -> . LESS_THAN
    (48) S -> . GREATER_OR_EQUAL
    (49) S -> . LESS_OR_EQUAL
    (50) S -> . NOT_EQUAL

    EQUAL           shift and go to state 55
    GREATER_THAN    shift and go to state 56
    LESS_THAN       shift and go to state 57
    GREATER_OR_EQUAL shift and go to state 58
    LESS_OR_EQUAL   shift and go to state 59
    NOT_EQUAL       shift and go to state 60

    S                              shift and go to state 54

state 49

    (43) CD -> VA . S V
    (44) CD -> VA . S VA
    (45) S -> . EQUAL
    (46) S -> . GREATER_THAN
    (47) S -> . LESS_THAN
    (48) S -> . GREATER_OR_EQUAL
    (49) S -> . LESS_OR_EQUAL
    (50) S -> . NOT_EQUAL

    EQUAL           shift and go to state 55
    GREATER_THAN    shift and go to state 56
    LESS_THAN       shift and go to state 57
    GREATER_OR_EQUAL shift and go to state 58
    LESS_OR_EQUAL   shift and go to state 59
    NOT_EQUAL       shift and go to state 60

    S                              shift and go to state 61

state 50

    (64) GCF -> F PA CDF . PC MY C MN BLOCK_CODE
    (65) GCF -> F PA CDF . PC MY MN BLOCK_CODE
    (73) PC -> . PARENTHESIS_CLOSE

    PARENTHESIS_CLOSE shift and go to state 72

    PC                             shift and go to state 73

state 51

    (68) CDF -> NUMBER . SE NUMBER SE O
    (69) SE -> . PIPE

    PIPE            shift and go to state 75

    SE                             shift and go to state 74

state 52

    (16) PRINT -> AO VAP AC . BLOCK_CODE
    (2) BLOCK_CODE -> . GV
    (3) BLOCK_CODE -> . GC
    (4) BLOCK_CODE -> . GF
    (5) BLOCK_CODE -> . GCF
    (6) BLOCK_CODE -> . PRINT
    (7) BLOCK_CODE -> . EMPTY
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (51) GF -> . TD V ME PR MA MY C RT MN BLOCK_CODE
    (52) GF -> . V ME PR MA MY C MN BLOCK_CODE
    (53) GF -> . TD V ME PR MA MY RT MN BLOCK_CODE
    (54) GF -> . V ME PR MA MY MN BLOCK_CODE
    (55) GF -> . TD V ME MA MY C RT MN BLOCK_CODE
    (56) GF -> . V ME MA MY C MN BLOCK_CODE
    (57) GF -> . TD V ME MA MY RT MN BLOCK_CODE
    (58) GF -> . V ME MA MY MN BLOCK_CODE
    (59) GF -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (30) V -> . VARIABLE
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

    $end            reduce using rule 76 (EMPTY -> .)
    LESS_OR_EQUAL   reduce using rule 76 (EMPTY -> .)
    RETURN          reduce using rule 76 (EMPTY -> .)
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

    AO                             shift and go to state 13
    BLOCK_CODE                     shift and go to state 76
    GV                             shift and go to state 3
    GC                             shift and go to state 4
    GF                             shift and go to state 5
    GCF                            shift and go to state 6
    PRINT                          shift and go to state 7
    EMPTY                          shift and go to state 8
    TD                             shift and go to state 9
    V                              shift and go to state 10
    CN                             shift and go to state 11
    F                              shift and go to state 12

state 53

    (25) AC -> ME . SUBTRACTION

    SUBTRACTION     shift and go to state 77


state 54

    (41) CD -> V S . V
    (42) CD -> V S . VA
    (30) V -> . VARIABLE
    (32) VA -> . NUMBER
    (33) VA -> . NUMBER DOT NUMBER
    (34) VA -> . TRUE_VALUE
    (35) VA -> . FALSE_VALUE
    (36) VA -> . QUOTATION_MARKS V QUOTATION_MARKS

    VARIABLE        shift and go to state 19
    NUMBER          shift and go to state 33
    TRUE_VALUE      shift and go to state 34
    FALSE_VALUE     shift and go to state 35
    QUOTATION_MARKS shift and go to state 36

    V                              shift and go to state 78
    VA                             shift and go to state 79

state 55

    (45) S -> EQUAL .

    VARIABLE        reduce using rule 45 (S -> EQUAL .)
    NUMBER          reduce using rule 45 (S -> EQUAL .)
    TRUE_VALUE      reduce using rule 45 (S -> EQUAL .)
    FALSE_VALUE     reduce using rule 45 (S -> EQUAL .)
    QUOTATION_MARKS reduce using rule 45 (S -> EQUAL .)


state 56

    (46) S -> GREATER_THAN .

    VARIABLE        reduce using rule 46 (S -> GREATER_THAN .)
    NUMBER          reduce using rule 46 (S -> GREATER_THAN .)
    TRUE_VALUE      reduce using rule 46 (S -> GREATER_THAN .)
    FALSE_VALUE     reduce using rule 46 (S -> GREATER_THAN .)
    QUOTATION_MARKS reduce using rule 46 (S -> GREATER_THAN .)


state 57

    (47) S -> LESS_THAN .

    VARIABLE        reduce using rule 47 (S -> LESS_THAN .)
    NUMBER          reduce using rule 47 (S -> LESS_THAN .)
    TRUE_VALUE      reduce using rule 47 (S -> LESS_THAN .)
    FALSE_VALUE     reduce using rule 47 (S -> LESS_THAN .)
    QUOTATION_MARKS reduce using rule 47 (S -> LESS_THAN .)


state 58

    (48) S -> GREATER_OR_EQUAL .

    VARIABLE        reduce using rule 48 (S -> GREATER_OR_EQUAL .)
    NUMBER          reduce using rule 48 (S -> GREATER_OR_EQUAL .)
    TRUE_VALUE      reduce using rule 48 (S -> GREATER_OR_EQUAL .)
    FALSE_VALUE     reduce using rule 48 (S -> GREATER_OR_EQUAL .)
    QUOTATION_MARKS reduce using rule 48 (S -> GREATER_OR_EQUAL .)


state 59

    (49) S -> LESS_OR_EQUAL .

    VARIABLE        reduce using rule 49 (S -> LESS_OR_EQUAL .)
    NUMBER          reduce using rule 49 (S -> LESS_OR_EQUAL .)
    TRUE_VALUE      reduce using rule 49 (S -> LESS_OR_EQUAL .)
    FALSE_VALUE     reduce using rule 49 (S -> LESS_OR_EQUAL .)
    QUOTATION_MARKS reduce using rule 49 (S -> LESS_OR_EQUAL .)


state 60

    (50) S -> NOT_EQUAL .

    VARIABLE        reduce using rule 50 (S -> NOT_EQUAL .)
    NUMBER          reduce using rule 50 (S -> NOT_EQUAL .)
    TRUE_VALUE      reduce using rule 50 (S -> NOT_EQUAL .)
    FALSE_VALUE     reduce using rule 50 (S -> NOT_EQUAL .)
    QUOTATION_MARKS reduce using rule 50 (S -> NOT_EQUAL .)


state 61

    (43) CD -> VA S . V
    (44) CD -> VA S . VA
    (30) V -> . VARIABLE
    (32) VA -> . NUMBER
    (33) VA -> . NUMBER DOT NUMBER
    (34) VA -> . TRUE_VALUE
    (35) VA -> . FALSE_VALUE
    (36) VA -> . QUOTATION_MARKS V QUOTATION_MARKS

    VARIABLE        shift and go to state 19
    NUMBER          shift and go to state 33
    TRUE_VALUE      shift and go to state 34
    FALSE_VALUE     shift and go to state 35
    QUOTATION_MARKS shift and go to state 36

    VA                             shift and go to state 80
    V                              shift and go to state 81

state 62

    (33) VA -> NUMBER DOT . NUMBER

    NUMBER          shift and go to state 82


state 63

    (36) VA -> QUOTATION_MARKS V . QUOTATION_MARKS

    QUOTATION_MARKS shift and go to state 83


state 64

    (23) FR -> TD V . ME PR MA
    (24) FR -> TD V . ME MA
    (61) ME -> . LESS_THAN

    LESS_THAN       shift and go to state 24

    ME                             shift and go to state 84

state 65

    (13) GV -> TD V I VA . BLOCK_CODE
    (2) BLOCK_CODE -> . GV
    (3) BLOCK_CODE -> . GC
    (4) BLOCK_CODE -> . GF
    (5) BLOCK_CODE -> . GCF
    (6) BLOCK_CODE -> . PRINT
    (7) BLOCK_CODE -> . EMPTY
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (51) GF -> . TD V ME PR MA MY C RT MN BLOCK_CODE
    (52) GF -> . V ME PR MA MY C MN BLOCK_CODE
    (53) GF -> . TD V ME PR MA MY RT MN BLOCK_CODE
    (54) GF -> . V ME PR MA MY MN BLOCK_CODE
    (55) GF -> . TD V ME MA MY C RT MN BLOCK_CODE
    (56) GF -> . V ME MA MY C MN BLOCK_CODE
    (57) GF -> . TD V ME MA MY RT MN BLOCK_CODE
    (58) GF -> . V ME MA MY MN BLOCK_CODE
    (59) GF -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (30) V -> . VARIABLE
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

    $end            reduce using rule 76 (EMPTY -> .)
    LESS_OR_EQUAL   reduce using rule 76 (EMPTY -> .)
    RETURN          reduce using rule 76 (EMPTY -> .)
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

    TD                             shift and go to state 9
    V                              shift and go to state 10
    BLOCK_CODE                     shift and go to state 85
    GV                             shift and go to state 3
    GC                             shift and go to state 4
    GF                             shift and go to state 5
    GCF                            shift and go to state 6
    PRINT                          shift and go to state 7
    EMPTY                          shift and go to state 8
    CN                             shift and go to state 11
    F                              shift and go to state 12
    AO                             shift and go to state 13

state 66

    (51) GF -> TD V ME PR . MA MY C RT MN BLOCK_CODE
    (53) GF -> TD V ME PR . MA MY RT MN BLOCK_CODE
    (62) MA -> . GREATER_THAN

    GREATER_THAN    shift and go to state 39

    MA                             shift and go to state 86

state 67

    (55) GF -> TD V ME MA . MY C RT MN BLOCK_CODE
    (57) GF -> TD V ME MA . MY RT MN BLOCK_CODE
    (74) MY -> . OPEN_BODY

    OPEN_BODY       shift and go to state 70

    MY                             shift and go to state 87

state 68

    (52) GF -> V ME PR MA . MY C MN BLOCK_CODE
    (54) GF -> V ME PR MA . MY MN BLOCK_CODE
    (74) MY -> . OPEN_BODY

    OPEN_BODY       shift and go to state 70

    MY                             shift and go to state 88

state 69

    (56) GF -> V ME MA MY . C MN BLOCK_CODE
    (58) GF -> V ME MA MY . MN BLOCK_CODE
    (8) C -> . GV
    (9) C -> . GC
    (10) C -> . GCF
    (11) C -> . PRINT
    (12) C -> . EMPTY
    (75) MN -> . LESS_OR_EQUAL
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

  ! shift/reduce conflict for LESS_OR_EQUAL resolved as shift
    LESS_OR_EQUAL   shift and go to state 96
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

  ! LESS_OR_EQUAL   [ reduce using rule 76 (EMPTY -> .) ]

    C                              shift and go to state 89
    MN                             shift and go to state 90
    GV                             shift and go to state 91
    GC                             shift and go to state 92
    GCF                            shift and go to state 93
    PRINT                          shift and go to state 94
    EMPTY                          shift and go to state 95
    TD                             shift and go to state 97
    CN                             shift and go to state 11
    F                              shift and go to state 12
    AO                             shift and go to state 13

state 70

    (74) MY -> OPEN_BODY .

    LESS_OR_EQUAL   reduce using rule 74 (MY -> OPEN_BODY .)
    INTEGER_TYPE    reduce using rule 74 (MY -> OPEN_BODY .)
    BOOLEAN_TYPE    reduce using rule 74 (MY -> OPEN_BODY .)
    DECIMAL_TYPE    reduce using rule 74 (MY -> OPEN_BODY .)
    STRING_TYPE     reduce using rule 74 (MY -> OPEN_BODY .)
    IF              reduce using rule 74 (MY -> OPEN_BODY .)
    FOR             reduce using rule 74 (MY -> OPEN_BODY .)
    SUBTRACTION     reduce using rule 74 (MY -> OPEN_BODY .)
    RETURN          reduce using rule 74 (MY -> OPEN_BODY .)


state 71

    (37) GC -> CN PA CD PC . MY C MN BLOCK_CODE
    (38) GC -> CN PA CD PC . MY MN BLOCK_CODE
    (74) MY -> . OPEN_BODY

    OPEN_BODY       shift and go to state 70

    MY                             shift and go to state 98

state 72

    (73) PC -> PARENTHESIS_CLOSE .

    OPEN_BODY       reduce using rule 73 (PC -> PARENTHESIS_CLOSE .)


state 73

    (64) GCF -> F PA CDF PC . MY C MN BLOCK_CODE
    (65) GCF -> F PA CDF PC . MY MN BLOCK_CODE
    (74) MY -> . OPEN_BODY

    OPEN_BODY       shift and go to state 70

    MY                             shift and go to state 99

state 74

    (68) CDF -> NUMBER SE . NUMBER SE O

    NUMBER          shift and go to state 100


state 75

    (69) SE -> PIPE .

    NUMBER          reduce using rule 69 (SE -> PIPE .)
    SUBTRACTION     reduce using rule 69 (SE -> PIPE .)
    ADDITION        reduce using rule 69 (SE -> PIPE .)


state 76

    (16) PRINT -> AO VAP AC BLOCK_CODE .

    $end            reduce using rule 16 (PRINT -> AO VAP AC BLOCK_CODE .)
    LESS_OR_EQUAL   reduce using rule 16 (PRINT -> AO VAP AC BLOCK_CODE .)
    RETURN          reduce using rule 16 (PRINT -> AO VAP AC BLOCK_CODE .)


state 77

    (25) AC -> ME SUBTRACTION .

    INTEGER_TYPE    reduce using rule 25 (AC -> ME SUBTRACTION .)
    BOOLEAN_TYPE    reduce using rule 25 (AC -> ME SUBTRACTION .)
    DECIMAL_TYPE    reduce using rule 25 (AC -> ME SUBTRACTION .)
    STRING_TYPE     reduce using rule 25 (AC -> ME SUBTRACTION .)
    IF              reduce using rule 25 (AC -> ME SUBTRACTION .)
    VARIABLE        reduce using rule 25 (AC -> ME SUBTRACTION .)
    FOR             reduce using rule 25 (AC -> ME SUBTRACTION .)
    SUBTRACTION     reduce using rule 25 (AC -> ME SUBTRACTION .)
    $end            reduce using rule 25 (AC -> ME SUBTRACTION .)
    LESS_OR_EQUAL   reduce using rule 25 (AC -> ME SUBTRACTION .)
    RETURN          reduce using rule 25 (AC -> ME SUBTRACTION .)


state 78

    (41) CD -> V S V .

    LESS_THAN       reduce using rule 41 (CD -> V S V .)
    PARENTHESIS_CLOSE reduce using rule 41 (CD -> V S V .)


state 79

    (42) CD -> V S VA .

    LESS_THAN       reduce using rule 42 (CD -> V S VA .)
    PARENTHESIS_CLOSE reduce using rule 42 (CD -> V S VA .)


state 80

    (44) CD -> VA S VA .

    LESS_THAN       reduce using rule 44 (CD -> VA S VA .)
    PARENTHESIS_CLOSE reduce using rule 44 (CD -> VA S VA .)


state 81

    (43) CD -> VA S V .

    LESS_THAN       reduce using rule 43 (CD -> VA S V .)
    PARENTHESIS_CLOSE reduce using rule 43 (CD -> VA S V .)


state 82

    (33) VA -> NUMBER DOT NUMBER .

    EQUAL           reduce using rule 33 (VA -> NUMBER DOT NUMBER .)
    GREATER_THAN    reduce using rule 33 (VA -> NUMBER DOT NUMBER .)
    LESS_THAN       reduce using rule 33 (VA -> NUMBER DOT NUMBER .)
    GREATER_OR_EQUAL reduce using rule 33 (VA -> NUMBER DOT NUMBER .)
    LESS_OR_EQUAL   reduce using rule 33 (VA -> NUMBER DOT NUMBER .)
    NOT_EQUAL       reduce using rule 33 (VA -> NUMBER DOT NUMBER .)
    INTEGER_TYPE    reduce using rule 33 (VA -> NUMBER DOT NUMBER .)
    BOOLEAN_TYPE    reduce using rule 33 (VA -> NUMBER DOT NUMBER .)
    DECIMAL_TYPE    reduce using rule 33 (VA -> NUMBER DOT NUMBER .)
    STRING_TYPE     reduce using rule 33 (VA -> NUMBER DOT NUMBER .)
    IF              reduce using rule 33 (VA -> NUMBER DOT NUMBER .)
    VARIABLE        reduce using rule 33 (VA -> NUMBER DOT NUMBER .)
    FOR             reduce using rule 33 (VA -> NUMBER DOT NUMBER .)
    SUBTRACTION     reduce using rule 33 (VA -> NUMBER DOT NUMBER .)
    $end            reduce using rule 33 (VA -> NUMBER DOT NUMBER .)
    RETURN          reduce using rule 33 (VA -> NUMBER DOT NUMBER .)
    PARENTHESIS_CLOSE reduce using rule 33 (VA -> NUMBER DOT NUMBER .)


state 83

    (36) VA -> QUOTATION_MARKS V QUOTATION_MARKS .

    EQUAL           reduce using rule 36 (VA -> QUOTATION_MARKS V QUOTATION_MARKS .)
    GREATER_THAN    reduce using rule 36 (VA -> QUOTATION_MARKS V QUOTATION_MARKS .)
    LESS_THAN       reduce using rule 36 (VA -> QUOTATION_MARKS V QUOTATION_MARKS .)
    GREATER_OR_EQUAL reduce using rule 36 (VA -> QUOTATION_MARKS V QUOTATION_MARKS .)
    LESS_OR_EQUAL   reduce using rule 36 (VA -> QUOTATION_MARKS V QUOTATION_MARKS .)
    NOT_EQUAL       reduce using rule 36 (VA -> QUOTATION_MARKS V QUOTATION_MARKS .)
    INTEGER_TYPE    reduce using rule 36 (VA -> QUOTATION_MARKS V QUOTATION_MARKS .)
    BOOLEAN_TYPE    reduce using rule 36 (VA -> QUOTATION_MARKS V QUOTATION_MARKS .)
    DECIMAL_TYPE    reduce using rule 36 (VA -> QUOTATION_MARKS V QUOTATION_MARKS .)
    STRING_TYPE     reduce using rule 36 (VA -> QUOTATION_MARKS V QUOTATION_MARKS .)
    IF              reduce using rule 36 (VA -> QUOTATION_MARKS V QUOTATION_MARKS .)
    VARIABLE        reduce using rule 36 (VA -> QUOTATION_MARKS V QUOTATION_MARKS .)
    FOR             reduce using rule 36 (VA -> QUOTATION_MARKS V QUOTATION_MARKS .)
    SUBTRACTION     reduce using rule 36 (VA -> QUOTATION_MARKS V QUOTATION_MARKS .)
    $end            reduce using rule 36 (VA -> QUOTATION_MARKS V QUOTATION_MARKS .)
    RETURN          reduce using rule 36 (VA -> QUOTATION_MARKS V QUOTATION_MARKS .)
    PARENTHESIS_CLOSE reduce using rule 36 (VA -> QUOTATION_MARKS V QUOTATION_MARKS .)


state 84

    (23) FR -> TD V ME . PR MA
    (24) FR -> TD V ME . MA
    (60) PR -> . V
    (62) MA -> . GREATER_THAN
    (30) V -> . VARIABLE

    GREATER_THAN    shift and go to state 39
    VARIABLE        shift and go to state 19

    V                              shift and go to state 44
    PR                             shift and go to state 101
    MA                             shift and go to state 102

state 85

    (13) GV -> TD V I VA BLOCK_CODE .

    $end            reduce using rule 13 (GV -> TD V I VA BLOCK_CODE .)
    LESS_OR_EQUAL   reduce using rule 13 (GV -> TD V I VA BLOCK_CODE .)
    RETURN          reduce using rule 13 (GV -> TD V I VA BLOCK_CODE .)


state 86

    (51) GF -> TD V ME PR MA . MY C RT MN BLOCK_CODE
    (53) GF -> TD V ME PR MA . MY RT MN BLOCK_CODE
    (74) MY -> . OPEN_BODY

    OPEN_BODY       shift and go to state 70

    MY                             shift and go to state 103

state 87

    (55) GF -> TD V ME MA MY . C RT MN BLOCK_CODE
    (57) GF -> TD V ME MA MY . RT MN BLOCK_CODE
    (8) C -> . GV
    (9) C -> . GC
    (10) C -> . GCF
    (11) C -> . PRINT
    (12) C -> . EMPTY
    (63) RT -> . RETURN V
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

  ! shift/reduce conflict for RETURN resolved as shift
    RETURN          shift and go to state 106
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

  ! RETURN          [ reduce using rule 76 (EMPTY -> .) ]

    TD                             shift and go to state 97
    C                              shift and go to state 104
    RT                             shift and go to state 105
    GV                             shift and go to state 91
    GC                             shift and go to state 92
    GCF                            shift and go to state 93
    PRINT                          shift and go to state 94
    EMPTY                          shift and go to state 95
    CN                             shift and go to state 11
    F                              shift and go to state 12
    AO                             shift and go to state 13

state 88

    (52) GF -> V ME PR MA MY . C MN BLOCK_CODE
    (54) GF -> V ME PR MA MY . MN BLOCK_CODE
    (8) C -> . GV
    (9) C -> . GC
    (10) C -> . GCF
    (11) C -> . PRINT
    (12) C -> . EMPTY
    (75) MN -> . LESS_OR_EQUAL
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

  ! shift/reduce conflict for LESS_OR_EQUAL resolved as shift
    LESS_OR_EQUAL   shift and go to state 96
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

  ! LESS_OR_EQUAL   [ reduce using rule 76 (EMPTY -> .) ]

    C                              shift and go to state 107
    MN                             shift and go to state 108
    GV                             shift and go to state 91
    GC                             shift and go to state 92
    GCF                            shift and go to state 93
    PRINT                          shift and go to state 94
    EMPTY                          shift and go to state 95
    TD                             shift and go to state 97
    CN                             shift and go to state 11
    F                              shift and go to state 12
    AO                             shift and go to state 13

state 89

    (56) GF -> V ME MA MY C . MN BLOCK_CODE
    (75) MN -> . LESS_OR_EQUAL

    LESS_OR_EQUAL   shift and go to state 96

    MN                             shift and go to state 109

state 90

    (58) GF -> V ME MA MY MN . BLOCK_CODE
    (2) BLOCK_CODE -> . GV
    (3) BLOCK_CODE -> . GC
    (4) BLOCK_CODE -> . GF
    (5) BLOCK_CODE -> . GCF
    (6) BLOCK_CODE -> . PRINT
    (7) BLOCK_CODE -> . EMPTY
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (51) GF -> . TD V ME PR MA MY C RT MN BLOCK_CODE
    (52) GF -> . V ME PR MA MY C MN BLOCK_CODE
    (53) GF -> . TD V ME PR MA MY RT MN BLOCK_CODE
    (54) GF -> . V ME PR MA MY MN BLOCK_CODE
    (55) GF -> . TD V ME MA MY C RT MN BLOCK_CODE
    (56) GF -> . V ME MA MY C MN BLOCK_CODE
    (57) GF -> . TD V ME MA MY RT MN BLOCK_CODE
    (58) GF -> . V ME MA MY MN BLOCK_CODE
    (59) GF -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (30) V -> . VARIABLE
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

    $end            reduce using rule 76 (EMPTY -> .)
    LESS_OR_EQUAL   reduce using rule 76 (EMPTY -> .)
    RETURN          reduce using rule 76 (EMPTY -> .)
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

    V                              shift and go to state 10
    BLOCK_CODE                     shift and go to state 110
    GV                             shift and go to state 3
    GC                             shift and go to state 4
    GF                             shift and go to state 5
    GCF                            shift and go to state 6
    PRINT                          shift and go to state 7
    EMPTY                          shift and go to state 8
    TD                             shift and go to state 9
    CN                             shift and go to state 11
    F                              shift and go to state 12
    AO                             shift and go to state 13

state 91

    (8) C -> GV .

    LESS_OR_EQUAL   reduce using rule 8 (C -> GV .)
    RETURN          reduce using rule 8 (C -> GV .)


state 92

    (9) C -> GC .

    LESS_OR_EQUAL   reduce using rule 9 (C -> GC .)
    RETURN          reduce using rule 9 (C -> GC .)


state 93

    (10) C -> GCF .

    LESS_OR_EQUAL   reduce using rule 10 (C -> GCF .)
    RETURN          reduce using rule 10 (C -> GCF .)


state 94

    (11) C -> PRINT .

    LESS_OR_EQUAL   reduce using rule 11 (C -> PRINT .)
    RETURN          reduce using rule 11 (C -> PRINT .)


state 95

    (12) C -> EMPTY .
    (15) GV -> EMPTY .
    (39) GC -> EMPTY .
    (66) GCF -> EMPTY .
    (17) PRINT -> EMPTY .

  ! reduce/reduce conflict for LESS_OR_EQUAL resolved using rule 12 (C -> EMPTY .)
  ! reduce/reduce conflict for RETURN resolved using rule 12 (C -> EMPTY .)
  ! reduce/reduce conflict for LESS_OR_EQUAL resolved using rule 12 (C -> EMPTY .)
  ! reduce/reduce conflict for RETURN resolved using rule 12 (C -> EMPTY .)
  ! reduce/reduce conflict for LESS_OR_EQUAL resolved using rule 12 (C -> EMPTY .)
  ! reduce/reduce conflict for RETURN resolved using rule 12 (C -> EMPTY .)
  ! reduce/reduce conflict for LESS_OR_EQUAL resolved using rule 12 (C -> EMPTY .)
  ! reduce/reduce conflict for RETURN resolved using rule 12 (C -> EMPTY .)
    LESS_OR_EQUAL   reduce using rule 12 (C -> EMPTY .)
    RETURN          reduce using rule 12 (C -> EMPTY .)

  ! LESS_OR_EQUAL   [ reduce using rule 15 (GV -> EMPTY .) ]
  ! RETURN          [ reduce using rule 15 (GV -> EMPTY .) ]
  ! LESS_OR_EQUAL   [ reduce using rule 39 (GC -> EMPTY .) ]
  ! RETURN          [ reduce using rule 39 (GC -> EMPTY .) ]
  ! LESS_OR_EQUAL   [ reduce using rule 66 (GCF -> EMPTY .) ]
  ! RETURN          [ reduce using rule 66 (GCF -> EMPTY .) ]
  ! LESS_OR_EQUAL   [ reduce using rule 17 (PRINT -> EMPTY .) ]
  ! RETURN          [ reduce using rule 17 (PRINT -> EMPTY .) ]


state 96

    (75) MN -> LESS_OR_EQUAL .

    INTEGER_TYPE    reduce using rule 75 (MN -> LESS_OR_EQUAL .)
    BOOLEAN_TYPE    reduce using rule 75 (MN -> LESS_OR_EQUAL .)
    DECIMAL_TYPE    reduce using rule 75 (MN -> LESS_OR_EQUAL .)
    STRING_TYPE     reduce using rule 75 (MN -> LESS_OR_EQUAL .)
    IF              reduce using rule 75 (MN -> LESS_OR_EQUAL .)
    VARIABLE        reduce using rule 75 (MN -> LESS_OR_EQUAL .)
    FOR             reduce using rule 75 (MN -> LESS_OR_EQUAL .)
    SUBTRACTION     reduce using rule 75 (MN -> LESS_OR_EQUAL .)
    $end            reduce using rule 75 (MN -> LESS_OR_EQUAL .)
    LESS_OR_EQUAL   reduce using rule 75 (MN -> LESS_OR_EQUAL .)
    RETURN          reduce using rule 75 (MN -> LESS_OR_EQUAL .)


state 97

    (13) GV -> TD . V I VA BLOCK_CODE
    (14) GV -> TD . V BLOCK_CODE
    (30) V -> . VARIABLE

    VARIABLE        shift and go to state 19

    V                              shift and go to state 111

state 98

    (37) GC -> CN PA CD PC MY . C MN BLOCK_CODE
    (38) GC -> CN PA CD PC MY . MN BLOCK_CODE
    (8) C -> . GV
    (9) C -> . GC
    (10) C -> . GCF
    (11) C -> . PRINT
    (12) C -> . EMPTY
    (75) MN -> . LESS_OR_EQUAL
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

  ! shift/reduce conflict for LESS_OR_EQUAL resolved as shift
    LESS_OR_EQUAL   shift and go to state 96
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

  ! LESS_OR_EQUAL   [ reduce using rule 76 (EMPTY -> .) ]

    CN                             shift and go to state 11
    C                              shift and go to state 112
    MN                             shift and go to state 113
    GV                             shift and go to state 91
    GC                             shift and go to state 92
    GCF                            shift and go to state 93
    PRINT                          shift and go to state 94
    EMPTY                          shift and go to state 95
    TD                             shift and go to state 97
    F                              shift and go to state 12
    AO                             shift and go to state 13

state 99

    (64) GCF -> F PA CDF PC MY . C MN BLOCK_CODE
    (65) GCF -> F PA CDF PC MY . MN BLOCK_CODE
    (8) C -> . GV
    (9) C -> . GC
    (10) C -> . GCF
    (11) C -> . PRINT
    (12) C -> . EMPTY
    (75) MN -> . LESS_OR_EQUAL
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

  ! shift/reduce conflict for LESS_OR_EQUAL resolved as shift
    LESS_OR_EQUAL   shift and go to state 96
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

  ! LESS_OR_EQUAL   [ reduce using rule 76 (EMPTY -> .) ]

    F                              shift and go to state 12
    C                              shift and go to state 114
    MN                             shift and go to state 115
    GV                             shift and go to state 91
    GC                             shift and go to state 92
    GCF                            shift and go to state 93
    PRINT                          shift and go to state 94
    EMPTY                          shift and go to state 95
    TD                             shift and go to state 97
    CN                             shift and go to state 11
    AO                             shift and go to state 13

state 100

    (68) CDF -> NUMBER SE NUMBER . SE O
    (69) SE -> . PIPE

    PIPE            shift and go to state 75

    SE                             shift and go to state 116

state 101

    (23) FR -> TD V ME PR . MA
    (62) MA -> . GREATER_THAN

    GREATER_THAN    shift and go to state 39

    MA                             shift and go to state 117

state 102

    (24) FR -> TD V ME MA .

    LESS_THAN       reduce using rule 24 (FR -> TD V ME MA .)


state 103

    (51) GF -> TD V ME PR MA MY . C RT MN BLOCK_CODE
    (53) GF -> TD V ME PR MA MY . RT MN BLOCK_CODE
    (8) C -> . GV
    (9) C -> . GC
    (10) C -> . GCF
    (11) C -> . PRINT
    (12) C -> . EMPTY
    (63) RT -> . RETURN V
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

  ! shift/reduce conflict for RETURN resolved as shift
    RETURN          shift and go to state 106
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

  ! RETURN          [ reduce using rule 76 (EMPTY -> .) ]

    TD                             shift and go to state 97
    C                              shift and go to state 118
    RT                             shift and go to state 119
    GV                             shift and go to state 91
    GC                             shift and go to state 92
    GCF                            shift and go to state 93
    PRINT                          shift and go to state 94
    EMPTY                          shift and go to state 95
    CN                             shift and go to state 11
    F                              shift and go to state 12
    AO                             shift and go to state 13

state 104

    (55) GF -> TD V ME MA MY C . RT MN BLOCK_CODE
    (63) RT -> . RETURN V

    RETURN          shift and go to state 106

    RT                             shift and go to state 120

state 105

    (57) GF -> TD V ME MA MY RT . MN BLOCK_CODE
    (75) MN -> . LESS_OR_EQUAL

    LESS_OR_EQUAL   shift and go to state 96

    MN                             shift and go to state 121

state 106

    (63) RT -> RETURN . V
    (30) V -> . VARIABLE

    VARIABLE        shift and go to state 19

    V                              shift and go to state 122

state 107

    (52) GF -> V ME PR MA MY C . MN BLOCK_CODE
    (75) MN -> . LESS_OR_EQUAL

    LESS_OR_EQUAL   shift and go to state 96

    MN                             shift and go to state 123

state 108

    (54) GF -> V ME PR MA MY MN . BLOCK_CODE
    (2) BLOCK_CODE -> . GV
    (3) BLOCK_CODE -> . GC
    (4) BLOCK_CODE -> . GF
    (5) BLOCK_CODE -> . GCF
    (6) BLOCK_CODE -> . PRINT
    (7) BLOCK_CODE -> . EMPTY
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (51) GF -> . TD V ME PR MA MY C RT MN BLOCK_CODE
    (52) GF -> . V ME PR MA MY C MN BLOCK_CODE
    (53) GF -> . TD V ME PR MA MY RT MN BLOCK_CODE
    (54) GF -> . V ME PR MA MY MN BLOCK_CODE
    (55) GF -> . TD V ME MA MY C RT MN BLOCK_CODE
    (56) GF -> . V ME MA MY C MN BLOCK_CODE
    (57) GF -> . TD V ME MA MY RT MN BLOCK_CODE
    (58) GF -> . V ME MA MY MN BLOCK_CODE
    (59) GF -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (30) V -> . VARIABLE
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

    $end            reduce using rule 76 (EMPTY -> .)
    LESS_OR_EQUAL   reduce using rule 76 (EMPTY -> .)
    RETURN          reduce using rule 76 (EMPTY -> .)
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

    V                              shift and go to state 10
    BLOCK_CODE                     shift and go to state 124
    GV                             shift and go to state 3
    GC                             shift and go to state 4
    GF                             shift and go to state 5
    GCF                            shift and go to state 6
    PRINT                          shift and go to state 7
    EMPTY                          shift and go to state 8
    TD                             shift and go to state 9
    CN                             shift and go to state 11
    F                              shift and go to state 12
    AO                             shift and go to state 13

state 109

    (56) GF -> V ME MA MY C MN . BLOCK_CODE
    (2) BLOCK_CODE -> . GV
    (3) BLOCK_CODE -> . GC
    (4) BLOCK_CODE -> . GF
    (5) BLOCK_CODE -> . GCF
    (6) BLOCK_CODE -> . PRINT
    (7) BLOCK_CODE -> . EMPTY
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (51) GF -> . TD V ME PR MA MY C RT MN BLOCK_CODE
    (52) GF -> . V ME PR MA MY C MN BLOCK_CODE
    (53) GF -> . TD V ME PR MA MY RT MN BLOCK_CODE
    (54) GF -> . V ME PR MA MY MN BLOCK_CODE
    (55) GF -> . TD V ME MA MY C RT MN BLOCK_CODE
    (56) GF -> . V ME MA MY C MN BLOCK_CODE
    (57) GF -> . TD V ME MA MY RT MN BLOCK_CODE
    (58) GF -> . V ME MA MY MN BLOCK_CODE
    (59) GF -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (30) V -> . VARIABLE
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

    $end            reduce using rule 76 (EMPTY -> .)
    LESS_OR_EQUAL   reduce using rule 76 (EMPTY -> .)
    RETURN          reduce using rule 76 (EMPTY -> .)
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

    V                              shift and go to state 10
    BLOCK_CODE                     shift and go to state 125
    GV                             shift and go to state 3
    GC                             shift and go to state 4
    GF                             shift and go to state 5
    GCF                            shift and go to state 6
    PRINT                          shift and go to state 7
    EMPTY                          shift and go to state 8
    TD                             shift and go to state 9
    CN                             shift and go to state 11
    F                              shift and go to state 12
    AO                             shift and go to state 13

state 110

    (58) GF -> V ME MA MY MN BLOCK_CODE .

    $end            reduce using rule 58 (GF -> V ME MA MY MN BLOCK_CODE .)
    LESS_OR_EQUAL   reduce using rule 58 (GF -> V ME MA MY MN BLOCK_CODE .)
    RETURN          reduce using rule 58 (GF -> V ME MA MY MN BLOCK_CODE .)


state 111

    (13) GV -> TD V . I VA BLOCK_CODE
    (14) GV -> TD V . BLOCK_CODE
    (31) I -> . ASSIGNMENT
    (2) BLOCK_CODE -> . GV
    (3) BLOCK_CODE -> . GC
    (4) BLOCK_CODE -> . GF
    (5) BLOCK_CODE -> . GCF
    (6) BLOCK_CODE -> . PRINT
    (7) BLOCK_CODE -> . EMPTY
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (51) GF -> . TD V ME PR MA MY C RT MN BLOCK_CODE
    (52) GF -> . V ME PR MA MY C MN BLOCK_CODE
    (53) GF -> . TD V ME PR MA MY RT MN BLOCK_CODE
    (54) GF -> . V ME PR MA MY MN BLOCK_CODE
    (55) GF -> . TD V ME MA MY C RT MN BLOCK_CODE
    (56) GF -> . V ME MA MY C MN BLOCK_CODE
    (57) GF -> . TD V ME MA MY RT MN BLOCK_CODE
    (58) GF -> . V ME MA MY MN BLOCK_CODE
    (59) GF -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (30) V -> . VARIABLE
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

    ASSIGNMENT      shift and go to state 43
    LESS_OR_EQUAL   reduce using rule 76 (EMPTY -> .)
    RETURN          reduce using rule 76 (EMPTY -> .)
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

    TD                             shift and go to state 9
    V                              shift and go to state 10
    I                              shift and go to state 40
    BLOCK_CODE                     shift and go to state 41
    GV                             shift and go to state 3
    GC                             shift and go to state 4
    GF                             shift and go to state 5
    GCF                            shift and go to state 6
    PRINT                          shift and go to state 7
    EMPTY                          shift and go to state 8
    CN                             shift and go to state 11
    F                              shift and go to state 12
    AO                             shift and go to state 13

state 112

    (37) GC -> CN PA CD PC MY C . MN BLOCK_CODE
    (75) MN -> . LESS_OR_EQUAL

    LESS_OR_EQUAL   shift and go to state 96

    MN                             shift and go to state 126

state 113

    (38) GC -> CN PA CD PC MY MN . BLOCK_CODE
    (2) BLOCK_CODE -> . GV
    (3) BLOCK_CODE -> . GC
    (4) BLOCK_CODE -> . GF
    (5) BLOCK_CODE -> . GCF
    (6) BLOCK_CODE -> . PRINT
    (7) BLOCK_CODE -> . EMPTY
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (51) GF -> . TD V ME PR MA MY C RT MN BLOCK_CODE
    (52) GF -> . V ME PR MA MY C MN BLOCK_CODE
    (53) GF -> . TD V ME PR MA MY RT MN BLOCK_CODE
    (54) GF -> . V ME PR MA MY MN BLOCK_CODE
    (55) GF -> . TD V ME MA MY C RT MN BLOCK_CODE
    (56) GF -> . V ME MA MY C MN BLOCK_CODE
    (57) GF -> . TD V ME MA MY RT MN BLOCK_CODE
    (58) GF -> . V ME MA MY MN BLOCK_CODE
    (59) GF -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (30) V -> . VARIABLE
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

    $end            reduce using rule 76 (EMPTY -> .)
    LESS_OR_EQUAL   reduce using rule 76 (EMPTY -> .)
    RETURN          reduce using rule 76 (EMPTY -> .)
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

    CN                             shift and go to state 11
    BLOCK_CODE                     shift and go to state 127
    GV                             shift and go to state 3
    GC                             shift and go to state 4
    GF                             shift and go to state 5
    GCF                            shift and go to state 6
    PRINT                          shift and go to state 7
    EMPTY                          shift and go to state 8
    TD                             shift and go to state 9
    V                              shift and go to state 10
    F                              shift and go to state 12
    AO                             shift and go to state 13

state 114

    (64) GCF -> F PA CDF PC MY C . MN BLOCK_CODE
    (75) MN -> . LESS_OR_EQUAL

    LESS_OR_EQUAL   shift and go to state 96

    MN                             shift and go to state 128

state 115

    (65) GCF -> F PA CDF PC MY MN . BLOCK_CODE
    (2) BLOCK_CODE -> . GV
    (3) BLOCK_CODE -> . GC
    (4) BLOCK_CODE -> . GF
    (5) BLOCK_CODE -> . GCF
    (6) BLOCK_CODE -> . PRINT
    (7) BLOCK_CODE -> . EMPTY
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (51) GF -> . TD V ME PR MA MY C RT MN BLOCK_CODE
    (52) GF -> . V ME PR MA MY C MN BLOCK_CODE
    (53) GF -> . TD V ME PR MA MY RT MN BLOCK_CODE
    (54) GF -> . V ME PR MA MY MN BLOCK_CODE
    (55) GF -> . TD V ME MA MY C RT MN BLOCK_CODE
    (56) GF -> . V ME MA MY C MN BLOCK_CODE
    (57) GF -> . TD V ME MA MY RT MN BLOCK_CODE
    (58) GF -> . V ME MA MY MN BLOCK_CODE
    (59) GF -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (30) V -> . VARIABLE
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

    $end            reduce using rule 76 (EMPTY -> .)
    LESS_OR_EQUAL   reduce using rule 76 (EMPTY -> .)
    RETURN          reduce using rule 76 (EMPTY -> .)
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

    F                              shift and go to state 12
    BLOCK_CODE                     shift and go to state 129
    GV                             shift and go to state 3
    GC                             shift and go to state 4
    GF                             shift and go to state 5
    GCF                            shift and go to state 6
    PRINT                          shift and go to state 7
    EMPTY                          shift and go to state 8
    TD                             shift and go to state 9
    V                              shift and go to state 10
    CN                             shift and go to state 11
    AO                             shift and go to state 13

state 116

    (68) CDF -> NUMBER SE NUMBER SE . O
    (70) O -> . SUBTRACTION
    (71) O -> . ADDITION

    SUBTRACTION     shift and go to state 131
    ADDITION        shift and go to state 132

    O                              shift and go to state 130

state 117

    (23) FR -> TD V ME PR MA .

    LESS_THAN       reduce using rule 23 (FR -> TD V ME PR MA .)


state 118

    (51) GF -> TD V ME PR MA MY C . RT MN BLOCK_CODE
    (63) RT -> . RETURN V

    RETURN          shift and go to state 106

    RT                             shift and go to state 133

state 119

    (53) GF -> TD V ME PR MA MY RT . MN BLOCK_CODE
    (75) MN -> . LESS_OR_EQUAL

    LESS_OR_EQUAL   shift and go to state 96

    MN                             shift and go to state 134

state 120

    (55) GF -> TD V ME MA MY C RT . MN BLOCK_CODE
    (75) MN -> . LESS_OR_EQUAL

    LESS_OR_EQUAL   shift and go to state 96

    MN                             shift and go to state 135

state 121

    (57) GF -> TD V ME MA MY RT MN . BLOCK_CODE
    (2) BLOCK_CODE -> . GV
    (3) BLOCK_CODE -> . GC
    (4) BLOCK_CODE -> . GF
    (5) BLOCK_CODE -> . GCF
    (6) BLOCK_CODE -> . PRINT
    (7) BLOCK_CODE -> . EMPTY
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (51) GF -> . TD V ME PR MA MY C RT MN BLOCK_CODE
    (52) GF -> . V ME PR MA MY C MN BLOCK_CODE
    (53) GF -> . TD V ME PR MA MY RT MN BLOCK_CODE
    (54) GF -> . V ME PR MA MY MN BLOCK_CODE
    (55) GF -> . TD V ME MA MY C RT MN BLOCK_CODE
    (56) GF -> . V ME MA MY C MN BLOCK_CODE
    (57) GF -> . TD V ME MA MY RT MN BLOCK_CODE
    (58) GF -> . V ME MA MY MN BLOCK_CODE
    (59) GF -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (30) V -> . VARIABLE
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

    $end            reduce using rule 76 (EMPTY -> .)
    LESS_OR_EQUAL   reduce using rule 76 (EMPTY -> .)
    RETURN          reduce using rule 76 (EMPTY -> .)
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

    TD                             shift and go to state 9
    V                              shift and go to state 10
    BLOCK_CODE                     shift and go to state 136
    GV                             shift and go to state 3
    GC                             shift and go to state 4
    GF                             shift and go to state 5
    GCF                            shift and go to state 6
    PRINT                          shift and go to state 7
    EMPTY                          shift and go to state 8
    CN                             shift and go to state 11
    F                              shift and go to state 12
    AO                             shift and go to state 13

state 122

    (63) RT -> RETURN V .

    LESS_OR_EQUAL   reduce using rule 63 (RT -> RETURN V .)


state 123

    (52) GF -> V ME PR MA MY C MN . BLOCK_CODE
    (2) BLOCK_CODE -> . GV
    (3) BLOCK_CODE -> . GC
    (4) BLOCK_CODE -> . GF
    (5) BLOCK_CODE -> . GCF
    (6) BLOCK_CODE -> . PRINT
    (7) BLOCK_CODE -> . EMPTY
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (51) GF -> . TD V ME PR MA MY C RT MN BLOCK_CODE
    (52) GF -> . V ME PR MA MY C MN BLOCK_CODE
    (53) GF -> . TD V ME PR MA MY RT MN BLOCK_CODE
    (54) GF -> . V ME PR MA MY MN BLOCK_CODE
    (55) GF -> . TD V ME MA MY C RT MN BLOCK_CODE
    (56) GF -> . V ME MA MY C MN BLOCK_CODE
    (57) GF -> . TD V ME MA MY RT MN BLOCK_CODE
    (58) GF -> . V ME MA MY MN BLOCK_CODE
    (59) GF -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (30) V -> . VARIABLE
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

    $end            reduce using rule 76 (EMPTY -> .)
    LESS_OR_EQUAL   reduce using rule 76 (EMPTY -> .)
    RETURN          reduce using rule 76 (EMPTY -> .)
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

    V                              shift and go to state 10
    BLOCK_CODE                     shift and go to state 137
    GV                             shift and go to state 3
    GC                             shift and go to state 4
    GF                             shift and go to state 5
    GCF                            shift and go to state 6
    PRINT                          shift and go to state 7
    EMPTY                          shift and go to state 8
    TD                             shift and go to state 9
    CN                             shift and go to state 11
    F                              shift and go to state 12
    AO                             shift and go to state 13

state 124

    (54) GF -> V ME PR MA MY MN BLOCK_CODE .

    $end            reduce using rule 54 (GF -> V ME PR MA MY MN BLOCK_CODE .)
    LESS_OR_EQUAL   reduce using rule 54 (GF -> V ME PR MA MY MN BLOCK_CODE .)
    RETURN          reduce using rule 54 (GF -> V ME PR MA MY MN BLOCK_CODE .)


state 125

    (56) GF -> V ME MA MY C MN BLOCK_CODE .

    $end            reduce using rule 56 (GF -> V ME MA MY C MN BLOCK_CODE .)
    LESS_OR_EQUAL   reduce using rule 56 (GF -> V ME MA MY C MN BLOCK_CODE .)
    RETURN          reduce using rule 56 (GF -> V ME MA MY C MN BLOCK_CODE .)


state 126

    (37) GC -> CN PA CD PC MY C MN . BLOCK_CODE
    (2) BLOCK_CODE -> . GV
    (3) BLOCK_CODE -> . GC
    (4) BLOCK_CODE -> . GF
    (5) BLOCK_CODE -> . GCF
    (6) BLOCK_CODE -> . PRINT
    (7) BLOCK_CODE -> . EMPTY
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (51) GF -> . TD V ME PR MA MY C RT MN BLOCK_CODE
    (52) GF -> . V ME PR MA MY C MN BLOCK_CODE
    (53) GF -> . TD V ME PR MA MY RT MN BLOCK_CODE
    (54) GF -> . V ME PR MA MY MN BLOCK_CODE
    (55) GF -> . TD V ME MA MY C RT MN BLOCK_CODE
    (56) GF -> . V ME MA MY C MN BLOCK_CODE
    (57) GF -> . TD V ME MA MY RT MN BLOCK_CODE
    (58) GF -> . V ME MA MY MN BLOCK_CODE
    (59) GF -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (30) V -> . VARIABLE
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

    $end            reduce using rule 76 (EMPTY -> .)
    LESS_OR_EQUAL   reduce using rule 76 (EMPTY -> .)
    RETURN          reduce using rule 76 (EMPTY -> .)
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

    CN                             shift and go to state 11
    BLOCK_CODE                     shift and go to state 138
    GV                             shift and go to state 3
    GC                             shift and go to state 4
    GF                             shift and go to state 5
    GCF                            shift and go to state 6
    PRINT                          shift and go to state 7
    EMPTY                          shift and go to state 8
    TD                             shift and go to state 9
    V                              shift and go to state 10
    F                              shift and go to state 12
    AO                             shift and go to state 13

state 127

    (38) GC -> CN PA CD PC MY MN BLOCK_CODE .

    $end            reduce using rule 38 (GC -> CN PA CD PC MY MN BLOCK_CODE .)
    LESS_OR_EQUAL   reduce using rule 38 (GC -> CN PA CD PC MY MN BLOCK_CODE .)
    RETURN          reduce using rule 38 (GC -> CN PA CD PC MY MN BLOCK_CODE .)


state 128

    (64) GCF -> F PA CDF PC MY C MN . BLOCK_CODE
    (2) BLOCK_CODE -> . GV
    (3) BLOCK_CODE -> . GC
    (4) BLOCK_CODE -> . GF
    (5) BLOCK_CODE -> . GCF
    (6) BLOCK_CODE -> . PRINT
    (7) BLOCK_CODE -> . EMPTY
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (51) GF -> . TD V ME PR MA MY C RT MN BLOCK_CODE
    (52) GF -> . V ME PR MA MY C MN BLOCK_CODE
    (53) GF -> . TD V ME PR MA MY RT MN BLOCK_CODE
    (54) GF -> . V ME PR MA MY MN BLOCK_CODE
    (55) GF -> . TD V ME MA MY C RT MN BLOCK_CODE
    (56) GF -> . V ME MA MY C MN BLOCK_CODE
    (57) GF -> . TD V ME MA MY RT MN BLOCK_CODE
    (58) GF -> . V ME MA MY MN BLOCK_CODE
    (59) GF -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (30) V -> . VARIABLE
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

    $end            reduce using rule 76 (EMPTY -> .)
    LESS_OR_EQUAL   reduce using rule 76 (EMPTY -> .)
    RETURN          reduce using rule 76 (EMPTY -> .)
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

    F                              shift and go to state 12
    BLOCK_CODE                     shift and go to state 139
    GV                             shift and go to state 3
    GC                             shift and go to state 4
    GF                             shift and go to state 5
    GCF                            shift and go to state 6
    PRINT                          shift and go to state 7
    EMPTY                          shift and go to state 8
    TD                             shift and go to state 9
    V                              shift and go to state 10
    CN                             shift and go to state 11
    AO                             shift and go to state 13

state 129

    (65) GCF -> F PA CDF PC MY MN BLOCK_CODE .

    $end            reduce using rule 65 (GCF -> F PA CDF PC MY MN BLOCK_CODE .)
    LESS_OR_EQUAL   reduce using rule 65 (GCF -> F PA CDF PC MY MN BLOCK_CODE .)
    RETURN          reduce using rule 65 (GCF -> F PA CDF PC MY MN BLOCK_CODE .)


state 130

    (68) CDF -> NUMBER SE NUMBER SE O .

    PARENTHESIS_CLOSE reduce using rule 68 (CDF -> NUMBER SE NUMBER SE O .)


state 131

    (70) O -> SUBTRACTION .

    PARENTHESIS_CLOSE reduce using rule 70 (O -> SUBTRACTION .)


state 132

    (71) O -> ADDITION .

    PARENTHESIS_CLOSE reduce using rule 71 (O -> ADDITION .)


state 133

    (51) GF -> TD V ME PR MA MY C RT . MN BLOCK_CODE
    (75) MN -> . LESS_OR_EQUAL

    LESS_OR_EQUAL   shift and go to state 96

    MN                             shift and go to state 140

state 134

    (53) GF -> TD V ME PR MA MY RT MN . BLOCK_CODE
    (2) BLOCK_CODE -> . GV
    (3) BLOCK_CODE -> . GC
    (4) BLOCK_CODE -> . GF
    (5) BLOCK_CODE -> . GCF
    (6) BLOCK_CODE -> . PRINT
    (7) BLOCK_CODE -> . EMPTY
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (51) GF -> . TD V ME PR MA MY C RT MN BLOCK_CODE
    (52) GF -> . V ME PR MA MY C MN BLOCK_CODE
    (53) GF -> . TD V ME PR MA MY RT MN BLOCK_CODE
    (54) GF -> . V ME PR MA MY MN BLOCK_CODE
    (55) GF -> . TD V ME MA MY C RT MN BLOCK_CODE
    (56) GF -> . V ME MA MY C MN BLOCK_CODE
    (57) GF -> . TD V ME MA MY RT MN BLOCK_CODE
    (58) GF -> . V ME MA MY MN BLOCK_CODE
    (59) GF -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (30) V -> . VARIABLE
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

    $end            reduce using rule 76 (EMPTY -> .)
    LESS_OR_EQUAL   reduce using rule 76 (EMPTY -> .)
    RETURN          reduce using rule 76 (EMPTY -> .)
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

    TD                             shift and go to state 9
    V                              shift and go to state 10
    BLOCK_CODE                     shift and go to state 141
    GV                             shift and go to state 3
    GC                             shift and go to state 4
    GF                             shift and go to state 5
    GCF                            shift and go to state 6
    PRINT                          shift and go to state 7
    EMPTY                          shift and go to state 8
    CN                             shift and go to state 11
    F                              shift and go to state 12
    AO                             shift and go to state 13

state 135

    (55) GF -> TD V ME MA MY C RT MN . BLOCK_CODE
    (2) BLOCK_CODE -> . GV
    (3) BLOCK_CODE -> . GC
    (4) BLOCK_CODE -> . GF
    (5) BLOCK_CODE -> . GCF
    (6) BLOCK_CODE -> . PRINT
    (7) BLOCK_CODE -> . EMPTY
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (51) GF -> . TD V ME PR MA MY C RT MN BLOCK_CODE
    (52) GF -> . V ME PR MA MY C MN BLOCK_CODE
    (53) GF -> . TD V ME PR MA MY RT MN BLOCK_CODE
    (54) GF -> . V ME PR MA MY MN BLOCK_CODE
    (55) GF -> . TD V ME MA MY C RT MN BLOCK_CODE
    (56) GF -> . V ME MA MY C MN BLOCK_CODE
    (57) GF -> . TD V ME MA MY RT MN BLOCK_CODE
    (58) GF -> . V ME MA MY MN BLOCK_CODE
    (59) GF -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (30) V -> . VARIABLE
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

    $end            reduce using rule 76 (EMPTY -> .)
    LESS_OR_EQUAL   reduce using rule 76 (EMPTY -> .)
    RETURN          reduce using rule 76 (EMPTY -> .)
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

    TD                             shift and go to state 9
    V                              shift and go to state 10
    BLOCK_CODE                     shift and go to state 142
    GV                             shift and go to state 3
    GC                             shift and go to state 4
    GF                             shift and go to state 5
    GCF                            shift and go to state 6
    PRINT                          shift and go to state 7
    EMPTY                          shift and go to state 8
    CN                             shift and go to state 11
    F                              shift and go to state 12
    AO                             shift and go to state 13

state 136

    (57) GF -> TD V ME MA MY RT MN BLOCK_CODE .

    $end            reduce using rule 57 (GF -> TD V ME MA MY RT MN BLOCK_CODE .)
    LESS_OR_EQUAL   reduce using rule 57 (GF -> TD V ME MA MY RT MN BLOCK_CODE .)
    RETURN          reduce using rule 57 (GF -> TD V ME MA MY RT MN BLOCK_CODE .)


state 137

    (52) GF -> V ME PR MA MY C MN BLOCK_CODE .

    $end            reduce using rule 52 (GF -> V ME PR MA MY C MN BLOCK_CODE .)
    LESS_OR_EQUAL   reduce using rule 52 (GF -> V ME PR MA MY C MN BLOCK_CODE .)
    RETURN          reduce using rule 52 (GF -> V ME PR MA MY C MN BLOCK_CODE .)


state 138

    (37) GC -> CN PA CD PC MY C MN BLOCK_CODE .

    $end            reduce using rule 37 (GC -> CN PA CD PC MY C MN BLOCK_CODE .)
    LESS_OR_EQUAL   reduce using rule 37 (GC -> CN PA CD PC MY C MN BLOCK_CODE .)
    RETURN          reduce using rule 37 (GC -> CN PA CD PC MY C MN BLOCK_CODE .)


state 139

    (64) GCF -> F PA CDF PC MY C MN BLOCK_CODE .

    $end            reduce using rule 64 (GCF -> F PA CDF PC MY C MN BLOCK_CODE .)
    LESS_OR_EQUAL   reduce using rule 64 (GCF -> F PA CDF PC MY C MN BLOCK_CODE .)
    RETURN          reduce using rule 64 (GCF -> F PA CDF PC MY C MN BLOCK_CODE .)


state 140

    (51) GF -> TD V ME PR MA MY C RT MN . BLOCK_CODE
    (2) BLOCK_CODE -> . GV
    (3) BLOCK_CODE -> . GC
    (4) BLOCK_CODE -> . GF
    (5) BLOCK_CODE -> . GCF
    (6) BLOCK_CODE -> . PRINT
    (7) BLOCK_CODE -> . EMPTY
    (13) GV -> . TD V I VA BLOCK_CODE
    (14) GV -> . TD V BLOCK_CODE
    (15) GV -> . EMPTY
    (37) GC -> . CN PA CD PC MY C MN BLOCK_CODE
    (38) GC -> . CN PA CD PC MY MN BLOCK_CODE
    (39) GC -> . EMPTY
    (51) GF -> . TD V ME PR MA MY C RT MN BLOCK_CODE
    (52) GF -> . V ME PR MA MY C MN BLOCK_CODE
    (53) GF -> . TD V ME PR MA MY RT MN BLOCK_CODE
    (54) GF -> . V ME PR MA MY MN BLOCK_CODE
    (55) GF -> . TD V ME MA MY C RT MN BLOCK_CODE
    (56) GF -> . V ME MA MY C MN BLOCK_CODE
    (57) GF -> . TD V ME MA MY RT MN BLOCK_CODE
    (58) GF -> . V ME MA MY MN BLOCK_CODE
    (59) GF -> . EMPTY
    (64) GCF -> . F PA CDF PC MY C MN BLOCK_CODE
    (65) GCF -> . F PA CDF PC MY MN BLOCK_CODE
    (66) GCF -> . EMPTY
    (16) PRINT -> . AO VAP AC BLOCK_CODE
    (17) PRINT -> . EMPTY
    (76) EMPTY -> .
    (26) TD -> . INTEGER_TYPE
    (27) TD -> . BOOLEAN_TYPE
    (28) TD -> . DECIMAL_TYPE
    (29) TD -> . STRING_TYPE
    (40) CN -> . IF
    (30) V -> . VARIABLE
    (67) F -> . FOR
    (18) AO -> . SUBTRACTION MA

    $end            reduce using rule 76 (EMPTY -> .)
    LESS_OR_EQUAL   reduce using rule 76 (EMPTY -> .)
    RETURN          reduce using rule 76 (EMPTY -> .)
    INTEGER_TYPE    shift and go to state 14
    BOOLEAN_TYPE    shift and go to state 15
    DECIMAL_TYPE    shift and go to state 16
    STRING_TYPE     shift and go to state 17
    IF              shift and go to state 18
    VARIABLE        shift and go to state 19
    FOR             shift and go to state 20
    SUBTRACTION     shift and go to state 21

    TD                             shift and go to state 9
    V                              shift and go to state 10
    BLOCK_CODE                     shift and go to state 143
    GV                             shift and go to state 3
    GC                             shift and go to state 4
    GF                             shift and go to state 5
    GCF                            shift and go to state 6
    PRINT                          shift and go to state 7
    EMPTY                          shift and go to state 8
    CN                             shift and go to state 11
    F                              shift and go to state 12
    AO                             shift and go to state 13

state 141

    (53) GF -> TD V ME PR MA MY RT MN BLOCK_CODE .

    $end            reduce using rule 53 (GF -> TD V ME PR MA MY RT MN BLOCK_CODE .)
    LESS_OR_EQUAL   reduce using rule 53 (GF -> TD V ME PR MA MY RT MN BLOCK_CODE .)
    RETURN          reduce using rule 53 (GF -> TD V ME PR MA MY RT MN BLOCK_CODE .)


state 142

    (55) GF -> TD V ME MA MY C RT MN BLOCK_CODE .

    $end            reduce using rule 55 (GF -> TD V ME MA MY C RT MN BLOCK_CODE .)
    LESS_OR_EQUAL   reduce using rule 55 (GF -> TD V ME MA MY C RT MN BLOCK_CODE .)
    RETURN          reduce using rule 55 (GF -> TD V ME MA MY C RT MN BLOCK_CODE .)


state 143

    (51) GF -> TD V ME PR MA MY C RT MN BLOCK_CODE .

    $end            reduce using rule 51 (GF -> TD V ME PR MA MY C RT MN BLOCK_CODE .)
    LESS_OR_EQUAL   reduce using rule 51 (GF -> TD V ME PR MA MY C RT MN BLOCK_CODE .)
    RETURN          reduce using rule 51 (GF -> TD V ME PR MA MY C RT MN BLOCK_CODE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LESS_THAN in state 29 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 30 resolved as shift
WARNING: shift/reduce conflict for LESS_OR_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 87 resolved as shift
WARNING: shift/reduce conflict for LESS_OR_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for LESS_OR_EQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for LESS_OR_EQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 103 resolved as shift
WARNING: reduce/reduce conflict in state 8 resolved using rule (BLOCK_CODE -> EMPTY)
WARNING: rejected rule (GV -> EMPTY) in state 8
WARNING: reduce/reduce conflict in state 8 resolved using rule (BLOCK_CODE -> EMPTY)
WARNING: rejected rule (GC -> EMPTY) in state 8
WARNING: reduce/reduce conflict in state 8 resolved using rule (BLOCK_CODE -> EMPTY)
WARNING: rejected rule (GF -> EMPTY) in state 8
WARNING: reduce/reduce conflict in state 8 resolved using rule (BLOCK_CODE -> EMPTY)
WARNING: rejected rule (GCF -> EMPTY) in state 8
WARNING: reduce/reduce conflict in state 8 resolved using rule (BLOCK_CODE -> EMPTY)
WARNING: rejected rule (PRINT -> EMPTY) in state 8
WARNING: reduce/reduce conflict in state 95 resolved using rule (C -> EMPTY)
WARNING: rejected rule (GV -> EMPTY) in state 95
WARNING: reduce/reduce conflict in state 95 resolved using rule (C -> EMPTY)
WARNING: rejected rule (GC -> EMPTY) in state 95
WARNING: reduce/reduce conflict in state 95 resolved using rule (C -> EMPTY)
WARNING: rejected rule (GCF -> EMPTY) in state 95
WARNING: reduce/reduce conflict in state 95 resolved using rule (C -> EMPTY)
WARNING: rejected rule (PRINT -> EMPTY) in state 95
WARNING: Rule (GV -> EMPTY) is never reduced
WARNING: Rule (GC -> EMPTY) is never reduced
WARNING: Rule (GF -> EMPTY) is never reduced
WARNING: Rule (GCF -> EMPTY) is never reduced
WARNING: Rule (PRINT -> EMPTY) is never reduced
